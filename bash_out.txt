Total simulation time in multiples of the eigenfrequency: 4500
NOTE: in multisim_lib, the minimum and maximum intrinsic frequency, [wmin, wmax] are used to calculate all initial detunings (including that with 0).
0.9*Tsim=4050.0 is too small to achieve a PSD time resolution of 0.000010000!
Adjusting *PSD_freq_resolution* parameter to fit given Tsim to 2.469135802e-04
Setup (dictNet, dictPLL): {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': [0.6886863094576641, -0.6910887836907333, 2.1054389969489113, 2.81498580312714, -1.1718026694938632, -0.3404493184067907, -0.34239125394938297, -0.053492037788359426, -0.718531555381515, -1.5051945417880812, 1.9685350240157362, -1.4303318430597198, 2.4585306250085965, 2.4095284124621204, 2.3509480655681383, -1.665581259878983, -0.812604545302317, -0.7164863254865694, 2.751012975257943, -0.5380997215329679], 'phiPerturbRot': []} {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9}
Implement here that a parameter is changed and then generate all combinations with the above realizations?!
scanValues: [[-2.76964988 -2.24446633 -2.65506885 -2.6768671   0.1198965   2.80150944
   1.75175435  1.97654876  0.72168498  3.06676187 -1.45428937  0.44121851
  -0.34264341  2.20609582 -0.06317111  2.51579477 -0.22119173  2.42050517
   1.10875355  2.02567148]
 [ 2.40782576 -0.07434016 -1.9900991   2.27087392 -0.78635835 -2.90097834
   0.9686732  -1.35141882 -1.45087481  1.66295279  2.33683289  0.25207586
  -0.47737317 -1.87269668 -0.8698108   1.0616869  -1.58168485 -2.02320385
  -0.90978268 -1.36646988]
 [ 1.48079063  2.35364695 -1.51720029  2.2064553   2.11488571  2.33687718
  -2.56843659  2.43882671  2.8354964   1.44790469  1.67675345 -2.32886863
  -2.24786275  2.51549555  1.37573566  2.41210736  2.45388907 -0.48785049
  -2.24388578  1.77381636]
 [-1.41743947 -0.04436517 -1.74979724  0.22344388 -0.08718559  0.79578769
  -2.56672391  1.978428   -0.22300284 -2.22798402 -2.12349774 -0.98275026
   2.75943378 -3.06867437  2.09651644  0.99066809 -2.35702194  1.46854655
  -2.70114663 -0.1402308 ]
 [-1.22993696 -2.90793815 -2.98001009 -2.14121988 -1.33541975 -1.49081856
   0.72580885  0.11975828  1.66642777 -0.3665159   0.10956877 -2.30489012
   0.46298426  0.15061495  0.29258331 -1.78840769 -2.29451094  1.19300976
  -0.99450788  3.01397178]
 [-2.48503369  1.09471499  0.54583503  2.00255023  1.36484678  2.05190579
   0.47599923 -1.37321482  3.01077168  0.03168949  2.86206261 -2.92534178
   2.79420175 -3.01973288 -2.89305727  0.56670973 -1.00974575 -0.10213476
   0.15904144  0.92092551]
 [-0.76830775 -1.21494347 -2.95783415  0.38749693  2.07004238  2.6332338
  -0.49587761 -1.23592407  1.12237229  1.87318728  2.7798603  -1.42367726
   2.55957092  1.5646026   2.70032718  2.02687322  1.41015405  0.55320996
   1.94414448 -0.37213129]
 [ 1.10196101 -2.10710183 -1.76025382 -1.8514017   0.92510647 -2.14154364
  -2.01004065 -0.37663129 -2.81439518 -0.55032451 -0.53865515  2.91631214
  -0.9123049   1.91638189 -0.33599504 -1.93010566  0.7536875   1.78258535
  -0.25414091 -1.75366449]
 [ 2.90197242  1.03272481  0.24919778  0.17889156 -0.7121784   1.16829692
  -2.54952012 -1.51887305 -3.13266001  0.85742126  2.52069802 -2.09772314
   0.01317581  0.145063    0.13387899 -0.2351306  -2.34770025  1.60610799
  -0.56032006  2.22840114]
 [-1.98408656  2.75498351 -2.73233334 -0.9246899   1.09614522  1.04317838
   0.05777229  1.68876252  1.69214615 -1.44615716 -1.41844477  1.43584963
  -1.30087149 -2.24490121  2.08603183  1.23854683  0.46658284  2.64325047
   2.98583907 -0.62358599]
 [ 0.46614888 -1.5038876   2.84513649  0.30989305 -2.41829986 -0.95766371
   1.39662767  2.89884633  2.44487867 -0.38386182  1.99092134  3.08339079
   2.20752776  1.97377156 -2.01331408 -2.32068515  1.13808467  2.48817149
  -1.04718252  3.07407917]
 [-2.94784433 -0.42812275  0.96180327  2.96950254 -1.46275901  1.86466767
  -2.41083519 -1.71596739 -2.0604474  -1.72159477 -0.68881513 -0.93908762
  -0.74863198  0.31317556  1.51493517  2.71514462 -1.39084921  0.70500192
  -2.30195645 -1.17527369]
 [-2.31744998  3.00692245 -1.23169652  0.38790646  1.5483107  -1.28133942
   0.98640633 -1.56315851 -1.56037701  0.27819973 -1.5753149  -3.08408441
   2.7229105  -1.72348785  2.02768421  0.98726109  0.10607855  0.92859207
  -0.80421937  0.23043507]
 [ 1.07890134  3.06634122 -1.7167222   1.75916351  0.68575606 -1.94884481
   0.72102997 -2.33582405 -1.52810303 -1.99794722 -1.891664    1.42277849
   0.11758866 -1.01586072 -2.86634623  1.68930143 -0.8744179  -0.15223992
  -0.43706228 -0.51198649]
 [ 2.14045113  0.6747428   2.18650647 -0.8933701   1.65392303  1.13798776
  -0.5940605   0.48308529 -0.2209138  -0.51196028 -1.04333821  0.55541035
  -1.85543486  2.60472146 -2.11949707  1.37086627 -2.635342    0.56611583
   0.7587084   1.77023984]
 [ 0.84882467  0.75481017 -1.48644566  0.11021294  1.37117331 -2.21752658
   0.02154889 -0.16378888  2.21868843 -2.38281811 -1.51649971  3.11676526
   1.64481417  0.25295554  1.66038467  2.96845445  2.8376006   0.78671038
   0.05154565  0.39227905]
 [ 0.45436289  3.03971441  2.63964724 -2.13784423  0.49565885  1.19315035
  -1.09754104  0.51602788 -2.98815395  0.89557949 -2.04388495  0.47462748
  -1.49868793  0.44378412  0.13793589  2.37634486 -0.57568662  1.47798996
   2.84355229 -2.84667072]
 [-1.4137645  -2.26082058 -0.74595194 -1.87302106  0.09665831 -0.89249946
   2.40919142 -2.29280192  0.0713708  -2.10797869 -2.24996889 -1.74731547
   1.29978363 -1.48313463  0.13496802 -3.04377736 -2.21617241  1.52031451
   1.07227633  2.91605025]]
iterConfig: (array([ 1.48079063,  2.35364695, -1.51720029,  2.2064553 ,  2.11488571,
        2.33687718, -2.56843659,  2.43882671,  2.8354964 ,  1.44790469,
        1.67675345, -2.32886863, -2.24786275,  2.51549555,  1.37573566,
        2.41210736,  2.45388907, -0.48785049, -2.24388578,  1.77381636]),) 	temp[0]: [ 1.48079063  2.35364695 -1.51720029  2.2064553   2.11488571  2.33687718
 -2.56843659  2.43882671  2.8354964   1.44790469  1.67675345 -2.32886863
 -2.24786275  2.51549555  1.37573566  2.41210736  2.45388907 -0.48785049
 -2.24388578  1.77381636]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l]iterConfig: (array([-2.76964988, -2.24446633, -2.65506885, -2.6768671 ,  0.1198965 ,
        2.80150944,  1.75175435,  1.97654876,  0.72168498,  3.06676187,
       -1.45428937,  0.44121851, -0.34264341,  2.20609582, -0.06317111,
        2.51579477, -0.22119173,  2.42050517,  1.10875355,  2.02567148]),) 	temp[0]: [-2.76964988 -2.24446633 -2.65506885 -2.6768671   0.1198965   2.80150944
  1.75175435  1.97654876  0.72168498  3.06676187 -1.45428937  0.44121851
 -0.34264341  2.20609582 -0.06317111  2.51579477 -0.22119173  2.42050517
  1.10875355  2.02567148]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l]iterConfig: (array([ 2.40782576, -0.07434016, -1.9900991 ,  2.27087392, -0.78635835,
       -2.90097834,  0.9686732 , -1.35141882, -1.45087481,  1.66295279,
        2.33683289,  0.25207586, -0.47737317, -1.87269668, -0.8698108 ,
        1.0616869 , -1.58168485, -2.02320385, -0.90978268, -1.36646988]),) 	temp[0]: [ 2.40782576 -0.07434016 -1.9900991   2.27087392 -0.78635835 -2.90097834
  0.9686732  -1.35141882 -1.45087481  1.66295279  2.33683289  0.25207586
 -0.47737317 -1.87269668 -0.8698108   1.0616869  -1.58168485 -2.02320385
 -0.90978268 -1.36646988]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l]iterConfig: (array([-1.41743947, -0.04436517, -1.74979724,  0.22344388, -0.08718559,
        0.79578769, -2.56672391,  1.978428  , -0.22300284, -2.22798402,
       -2.12349774, -0.98275026,  2.75943378, -3.06867437,  2.09651644,
        0.99066809, -2.35702194,  1.46854655, -2.70114663, -0.1402308 ]),) 	temp[0]: [-1.41743947 -0.04436517 -1.74979724  0.22344388 -0.08718559  0.79578769
 -2.56672391  1.978428   -0.22300284 -2.22798402 -2.12349774 -0.98275026
  2.75943378 -3.06867437  2.09651644  0.99066809 -2.35702194  1.46854655
 -2.70114663 -0.1402308 ]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l]iterConfig: (array([-1.22993696, -2.90793815, -2.98001009, -2.14121988, -1.33541975,
       -1.49081856,  0.72580885,  0.11975828,  1.66642777, -0.3665159 ,
        0.10956877, -2.30489012,  0.46298426,  0.15061495,  0.29258331,
       -1.78840769, -2.29451094,  1.19300976, -0.99450788,  3.01397178]),) 	temp[0]: [-1.22993696 -2.90793815 -2.98001009 -2.14121988 -1.33541975 -1.49081856
  0.72580885  0.11975828  1.66642777 -0.3665159   0.10956877 -2.30489012
  0.46298426  0.15061495  0.29258331 -1.78840769 -2.29451094  1.19300976
 -0.99450788  3.01397178]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l]iterConfig: (array([-2.48503369,  1.09471499,  0.54583503,  2.00255023,  1.36484678,
        2.05190579,  0.47599923, -1.37321482,  3.01077168,  0.03168949,
        2.86206261, -2.92534178,  2.79420175, -3.01973288, -2.89305727,
        0.56670973, -1.00974575, -0.10213476,  0.15904144,  0.92092551]),) 	temp[0]: [-2.48503369  1.09471499  0.54583503  2.00255023  1.36484678  2.05190579
  0.47599923 -1.37321482  3.01077168  0.03168949  2.86206261 -2.92534178
  2.79420175 -3.01973288 -2.89305727  0.56670973 -1.00974575 -0.10213476
  0.15904144  0.92092551]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1: [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1: [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1: [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1: [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1: [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-1.2299369563709088, -2.907938146337287, -2.9800100939505905, -2.1412198801488964, -1.3354197482070043, -1.490818563193998, 0.7258088460706795, 0.11975828121414889, 1.6664277674428956, -0.3665159026527669, 0.10956877167499135, -2.3048901152016215, 0.46298426367775836, 0.15061494748194715, 0.29258330739595806, -1.7884076853404736, -2.2945109436498705, 1.1930097573569753, -0.9945078809640826, 3.0139717831657835]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9361474216680208   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9551173551483482   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0259932684400992   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0571353840291364   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.066179051816193   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0341917821116775   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9483574909953109   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9683593054066837   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1018048578790067   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9978162700262638   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1162508878299646   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9264438939028822   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0356173368800492   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9947383758486534   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9724818198409261   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8625625398847167   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9614412125354105   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9531062221962615   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9826624809315644   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9454152198357033   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.017295424919620835  last value of R 0.018042855151724685
mean of modulus of the order parameter, R, over 2T: 0.017295424919620835  last value of R 0.018042855151724685
iterConfig: (array([-0.76830775, -1.21494347, -2.95783415,  0.38749693,  2.07004238,
        2.6332338 , -0.49587761, -1.23592407,  1.12237229,  1.87318728,
        2.7798603 , -1.42367726,  2.55957092,  1.5646026 ,  2.70032718,
        2.02687322,  1.41015405,  0.55320996,  1.94414448, -0.37213129]),) 	temp[0]: [-0.76830775 -1.21494347 -2.95783415  0.38749693  2.07004238  2.6332338
 -0.49587761 -1.23592407  1.12237229  1.87318728  2.7798603  -1.42367726
  2.55957092  1.5646026   2.70032718  2.02687322  1.41015405  0.55320996
  1.94414448 -0.37213129]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-2.769649876874177, -2.2444663340089974, -2.655068845803956, -2.6768671021725723, 0.11989649569125804, 2.8015094440547985, 1.751754349201767, 1.9765487591492246, 0.7216849788176445, 3.0667618724545562, -1.4542893706051774, 0.4412185128350483, -0.34264341301752577, 2.206095815214028, -0.06317110951969385, 2.5157947651618757, -0.22119172652687835, 2.42050517175882, 1.1087535507260284, 2.0256714808377696]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.015033518533225   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9565109819943179   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0095690465226659   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0836387646668935   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9956493079156669   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.909220544979521   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0045867935569814   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9752703162041341   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9837280590263687   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9090566412252731   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.000919247532456   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0093049665192104   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.982210890944914   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.967362749526161   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0418192634437162   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8322010682671684   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9638266090057456   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0670460767513166   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0160452251177186   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9980784366012377   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.016168972510870464  last value of R 0.006031968876119848
mean of modulus of the order parameter, R, over 2T: 0.016168972510870464  last value of R 0.006031968876119848
iterConfig: (array([ 1.10196101, -2.10710183, -1.76025382, -1.8514017 ,  0.92510647,
       -2.14154364, -2.01004065, -0.37663129, -2.81439518, -0.55032451,
       -0.53865515,  2.91631214, -0.9123049 ,  1.91638189, -0.33599504,
       -1.93010566,  0.7536875 ,  1.78258535, -0.25414091, -1.75366449]),) 	temp[0]: [ 1.10196101 -2.10710183 -1.76025382 -1.8514017   0.92510647 -2.14154364
 -2.01004065 -0.37663129 -2.81439518 -0.55032451 -0.53865515  2.91631214
 -0.9123049   1.91638189 -0.33599504 -1.93010566  0.7536875   1.78258535
 -0.25414091 -1.75366449]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [2.407825761923914, -0.07434016037591906, -1.9900990981224231, 2.2708739219464595, -0.786358346483305, -2.900978343611749, 0.9686731990161226, -1.351418822433934, -1.4508748115356989, 1.6629527934568609, 2.336832888006729, 0.25207585559734236, -0.4773731723284764, -1.8726966789307145, -0.8698108040721895, 1.061686896032863, -1.5816848522300273, -2.023203850105728, -0.9097826807599234, -1.3664698826558301]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.903596442100226   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9843054152817234   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0669682570314687   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0498738436760051   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0265818591855553   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0444334389648453   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.090124570422693   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9976344885768588   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0409408271575993   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8860367542242593   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9544580048568397   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.992916248606421   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0271805400066496   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0354550235886038   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9618520708084685   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8933369651745051   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9841750964054975   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0290623684990807   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0176923966373157   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9518734459204713   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.03786282685878572  last value of R 0.03766814026848744
mean of modulus of the order parameter, R, over 2T: 0.03786282685878572  last value of R 0.03766814026848744
iterConfig: (array([ 2.90197242,  1.03272481,  0.24919778,  0.17889156, -0.7121784 ,
        1.16829692, -2.54952012, -1.51887305, -3.13266001,  0.85742126,
        2.52069802, -2.09772314,  0.01317581,  0.145063  ,  0.13387899,
       -0.2351306 , -2.34770025,  1.60610799, -0.56032006,  2.22840114]),) 	temp[0]: [ 2.90197242  1.03272481  0.24919778  0.17889156 -0.7121784   1.16829692
 -2.54952012 -1.51887305 -3.13266001  0.85742126  2.52069802 -2.09772314
  0.01317581  0.145063    0.13387899 -0.2351306  -2.34770025  1.60610799
 -0.56032006  2.22840114]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-1.4174394726941946, -0.044365171338012654, -1.7497972361229746, 0.22344387595392767, -0.08718558716962477, 0.7957876932508969, -2.5667239071806196, 1.9784280001268204, -0.2230028434306508, -2.2279840224973135, -2.1234977447070627, -0.9827502608797127, 2.7594337803373463, -3.0686743690648153, 2.0965164405893457, 0.9906680911341619, -2.357021936997949, 1.468546553462442, -2.7011466331654383, -0.14023080384837305]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9741766271146232   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0013519713618357   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9780813912328604   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9718918013885772   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9872715578818904   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9735621136365098   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9378390796469414   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9972957380909406   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9815244376957837   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.007641440617692   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9449674276040821   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9706333577648175   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9423794893750128   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.943802999195433   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0561155621392189   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0184670707384835   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.101689566783826   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0025904411819218   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.012482009197138   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.033992546282263   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.017465419040225114  last value of R 0.020426686075672308
mean of modulus of the order parameter, R, over 2T: 0.017465419040225114  last value of R 0.020426686075672308
iterConfig: (array([-1.98408656,  2.75498351, -2.73233334, -0.9246899 ,  1.09614522,
        1.04317838,  0.05777229,  1.68876252,  1.69214615, -1.44615716,
       -1.41844477,  1.43584963, -1.30087149, -2.24490121,  2.08603183,
        1.23854683,  0.46658284,  2.64325047,  2.98583907, -0.62358599]),) 	temp[0]: [-1.98408656  2.75498351 -2.73233334 -0.9246899   1.09614522  1.04317838
  0.05777229  1.68876252  1.69214615 -1.44615716 -1.41844477  1.43584963
 -1.30087149 -2.24490121  2.08603183  1.23854683  0.46658284  2.64325047
  2.98583907 -0.62358599]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [1.480790628390844, 2.3536469473505814, -1.517200289933681, 2.206455302898381, 2.114885705215703, 2.3368771837587543, -2.568436585813427, 2.4388267109526724, 2.835496400439496, 1.4479046889919562, 1.6767534546040705, -2.3288686256828495, -2.2478627463513736, 2.515495547245994, 1.375735659807705, 2.412107355871985, 2.453889066854461, -0.4878504912700663, -2.2438857798075023, 1.7738163565330893]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0689990582829365   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.042675595356262   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9917145675826864   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9842321583630044   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0613462460459606   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0297972447557502   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0722068700828005   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.045887379217426   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9987671071917339   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0042922359154318   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.048720699553635   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.067552944448401   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9986159009363754   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.036094920848588   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0176849919642137   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9424727979904619   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9743956720402133   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9894477389057166   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9286473735452692   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0083620200619632   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.010590848696774405  last value of R 0.006525984275910111
mean of modulus of the order parameter, R, over 2T: 0.010590848696774405  last value of R 0.006525984275910111
iterConfig: (array([ 0.46614888, -1.5038876 ,  2.84513649,  0.30989305, -2.41829986,
       -0.95766371,  1.39662767,  2.89884633,  2.44487867, -0.38386182,
        1.99092134,  3.08339079,  2.20752776,  1.97377156, -2.01331408,
       -2.32068515,  1.13808467,  2.48817149, -1.04718252,  3.07407917]),) 	temp[0]: [ 0.46614888 -1.5038876   2.84513649  0.30989305 -2.41829986 -0.95766371
  1.39662767  2.89884633  2.44487867 -0.38386182  1.99092134  3.08339079
  2.20752776  1.97377156 -2.01331408 -2.32068515  1.13808467  2.48817149
 -1.04718252  3.07407917]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-2.485033691589947, 1.0947149910753113, 0.5458350281440492, 2.002550226799543, 1.3648467838645653, 2.051905790014975, 0.4759992275529985, -1.3732148228793348, 3.0107716761896306, 0.0316894940324608, 2.8620626120644985, -2.9253417835967466, 2.794201754167056, -3.0197328777402976, -2.8930572710928595, 0.5667097292514232, -1.0097457476009293, -0.10213475657436044, 0.15904143706457896, 0.9209255052965224]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8525953272379856   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.975726263306997   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0859428313546897   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0280961788767373   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0307345168668125   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0296750774735222   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0853752806422685   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0150268848921677   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9948851005000411   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9745279989464911   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9248736625774203   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.057556512695493   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9252267927626877   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9434654806474714   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0845796428577756   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.103968329980522   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0218139124884955   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9839243630258494   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9773980525742729   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9880906213882502   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.03208255856795993  last value of R 0.02251271207035574
mean of modulus of the order parameter, R, over 2T: 0.03208255856795993  last value of R 0.02251271207035574
iterConfig: (array([-2.94784433, -0.42812275,  0.96180327,  2.96950254, -1.46275901,
        1.86466767, -2.41083519, -1.71596739, -2.0604474 , -1.72159477,
       -0.68881513, -0.93908762, -0.74863198,  0.31317556,  1.51493517,
        2.71514462, -1.39084921,  0.70500192, -2.30195645, -1.17527369]),) 	temp[0]: [-2.94784433 -0.42812275  0.96180327  2.96950254 -1.46275901  1.86466767
 -2.41083519 -1.71596739 -2.0604474  -1.72159477 -0.68881513 -0.93908762
 -0.74863198  0.31317556  1.51493517  2.71514462 -1.39084921  0.70500192
 -2.30195645 -1.17527369]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-1.9840865638057992, 2.7549835059893955, -2.732333343265258, -0.9246898969622803, 1.096145220090495, 1.0431783800950676, 0.05777229141034157, 1.6887625211924684, 1.6921461509643123, -1.4461571633180188, -1.418444765840127, 1.4358496291509812, -1.3008714949987885, -2.24490121136864, 2.0860318253051027, 1.2385468300755287, 0.4665828409409727, 2.6432504709291127, 2.9858390654895626, -0.6235859913981914]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9233957229996895   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9899778168970769   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0398501911288924   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8731918604775168   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0307062795486728   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.018423915416214   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9308837411617609   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0584161621801678   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9837841398537182   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0862229204160776   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9768706768734873   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0364969111347053   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8982845972661695   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0709435460878671   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9587006001223712   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1023539007772167   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.018315757168383   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.016484614140106   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9831827810527958   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9795684393481127   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.006308542281287333  last value of R 0.010513875690193866
mean of modulus of the order parameter, R, over 2T: 0.006308542281287333  last value of R 0.010513875690193866
iterConfig: (array([-2.31744998,  3.00692245, -1.23169652,  0.38790646,  1.5483107 ,
       -1.28133942,  0.98640633, -1.56315851, -1.56037701,  0.27819973,
       -1.5753149 , -3.08408441,  2.7229105 , -1.72348785,  2.02768421,
        0.98726109,  0.10607855,  0.92859207, -0.80421937,  0.23043507]),) 	temp[0]: [-2.31744998  3.00692245 -1.23169652  0.38790646  1.5483107  -1.28133942
  0.98640633 -1.56315851 -1.56037701  0.27819973 -1.5753149  -3.08408441
  2.7229105  -1.72348785  2.02768421  0.98726109  0.10607855  0.92859207
 -0.80421937  0.23043507]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-2.3174499750932407, 3.0069224461511928, -1.2316965212037785, 0.38790646331389134, 1.5483106976923269, -1.2813394178872333, 0.9864063262917622, -1.563158510410076, -1.5603770104086168, 0.2781997256789466, -1.575314902543521, -3.084084406593672, 2.7229105029289187, -1.7234878493841834, 2.0276842060655076, 0.9872610906870873, 0.10607855188383564, 0.9285920660455389, -0.804219365566317, 0.2304350703538831]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9397486846321748   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9974403288061321   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0359434294077339   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9958037668581426   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.994791358788885   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.001995028064969   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0642240845644868   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9762108704898721   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9876535698694328   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9677083536545066   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0122348336037676   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0513235051238492   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9681108088198258   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9226564981292078   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9315515123726797   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0549625652315786   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1159113910324034   1.0   -0.0238732414637843
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-2.9478443295232135, -0.428122746251852, 0.9618032669124013, 2.969502540011611, -1.4627590120826752, 1.864667665638576, -2.410835193078819, -1.7159673859632092, -2.060447402905866, -1.721594773749177, -0.6888151286019584, -0.9390876162912036, -0.748631982056172, 0.3131755631176887, 1.514935165793811, 2.715144620691249, -1.3908492062379307, 0.7050019247282706, -2.3019564515908253, -1.1752736892817373]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.000873147271844   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9708647619764629   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9797832756161705   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.94092265498193   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9214459248094824   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0071162323091452   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.97902123670725   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0045599948574402   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.990392130199052   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.080939584248406   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9744835165359431   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9598988794693679   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.113238542666998   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8948287321390765   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0085565651578792   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9059318386906591   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9767653217822216   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.909144102486781   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9559681149668564   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9733422740927293   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.019457026633576353  last value of R 0.02203168997996514
mean of modulus of the order parameter, R, over 2T: 0.019457026633576353  last value of R 0.02203168997996514
iterConfig: (array([ 1.07890134,  3.06634122, -1.7167222 ,  1.75916351,  0.68575606,
       -1.94884481,  0.72102997, -2.33582405, -1.52810303, -1.99794722,
       -1.891664  ,  1.42277849,  0.11758866, -1.01586072, -2.86634623,
        1.68930143, -0.8744179 , -0.15223992, -0.43706228, -0.51198649]),) 	temp[0]: [ 1.07890134  3.06634122 -1.7167222   1.75916351  0.68575606 -1.94884481
  0.72102997 -2.33582405 -1.52810303 -1.99794722 -1.891664    1.42277849
  0.11758866 -1.01586072 -2.86634623  1.68930143 -0.8744179  -0.15223992
 -0.43706228 -0.51198649]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [1.0789013352976813, 3.066341224396486, -1.716722203466669, 1.7591635127039718, 0.6857560605560993, -1.9488448060519048, 0.7210299683358485, -2.3358240532529626, -1.5281030348437883, -1.9979472163471008, -1.8916639969159528, 1.4227784915954214, 0.11758866175336635, -1.0158607209895232, -2.8663462322149624, 1.6893014301839973, -0.8744178982849307, -0.1522399155807328, -0.4370622814527021, -0.5119864922609199]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0246127868526378   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0016228923140542   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9338714260967124   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.958958823518309   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0356794353315573   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9898051645007604   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0268877778857544   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0294179889373787   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.005312437854493   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.969680626227336   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0118732725556863   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9945704711915532   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0164671557059497   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9597005122505678   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9957808249011871   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9489749644700676   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0375066190572235   1.0   -0.0238732414637843
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [1.1019610100216708, -2.1071018309424043, -1.7602538194010309, -1.8514017041670159, 0.9251064655786951, -2.1415436361874125, -2.0100406458451268, -0.37663129444537, -2.8143951784719796, -0.5503245095008458, -0.5386551512588365, 2.916312139735865, -0.9123048952991759, 1.9163818880423724, -0.3359950356288257, -1.9301056627947666, 0.7536874984723343, 1.7825853467314046, -0.25414091452118504, -1.7536644929633567]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9476347533552685   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1075536957235277   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0466315904419483   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0336670056136108   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0464763334259277   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0697260049879047   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0337421429130107   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9299550372054772   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9179060294036743   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.963533005292836   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9995408510021437   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.961649802922633   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0520823101671857   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0380972801173216   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9960970603804595   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9751649825789267   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.044680205905566   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9976800087235216   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9548669537216372   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0701655812895507   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.019217246380696204  last value of R 0.0197202162996098
mean of modulus of the order parameter, R, over 2T: 0.019217246380696204  last value of R 0.0197202162996098
iterConfig: (array([ 2.14045113,  0.6747428 ,  2.18650647, -0.8933701 ,  1.65392303,
        1.13798776, -0.5940605 ,  0.48308529, -0.2209138 , -0.51196028,
       -1.04333821,  0.55541035, -1.85543486,  2.60472146, -2.11949707,
        1.37086627, -2.635342  ,  0.56611583,  0.7587084 ,  1.77023984]),) 	temp[0]: [ 2.14045113  0.6747428   2.18650647 -0.8933701   1.65392303  1.13798776
 -0.5940605   0.48308529 -0.2209138  -0.51196028 -1.04333821  0.55541035
 -1.85543486  2.60472146 -2.11949707  1.37086627 -2.635342    0.56611583
  0.7587084   1.77023984]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [2.140451129490371, 0.6747428029980354, 2.1865064650164276, -0.8933700963653597, 1.6539230308911925, 1.1379877617757144, -0.5940605032119555, 0.4830852868126603, -0.22091379871108296, -0.5119602758992232, -1.043338212725497, 0.5554103481856925, -1.8554348573563795, 2.6047214632260562, -2.1194970723559066, 1.3708662729391907, -2.6353420034993937, 0.5661158288611543, 0.7587083955887826, 1.7702398431548634]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8974910957842056   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9209612549603503   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0148866577388302   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0698553509169044   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.009456661458173   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0011217478730177   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9720764580560217   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9234727075092706   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0863026818891548   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.070988339663247   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0230515793389614   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0346121689638366   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.051383829129482   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.963448340617857   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9816688485286974   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9868571222752895   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9811563845291718   1.0   -0.0238732414637843
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-0.7683077480868201, -1.2149434713951972, -2.957834154993298, 0.387496930405681, 2.0700423834025514, 2.633233796610466, -0.4958776102893414, -1.2359240669258824, 1.1223722869775692, 1.873187279959974, 2.7798602957195984, -1.4236772643713125, 2.559570918688217, 1.5646025962499586, 2.7003271803100874, 2.0268732231199076, 1.4101540532713086, 0.5532099630986802, 1.944144475943479, -0.3721312916052564]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0438790235333204   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9740110539058822   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9765040403468515   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.914559986208107   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0442248619789252   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9556798867467325   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9568832806778397   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.95021009723013   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9614206406299839   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.077391423904374   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9496425051198918   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9973464330727282   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0579516410191343   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9899862849687052   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0009374756498193   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9398103388260666   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1110123810391273   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0600625917046294   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9788378238074463   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9643761047298447   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.041123496341474386  last value of R 0.0426343935403142
mean of modulus of the order parameter, R, over 2T: 0.041123496341474386  last value of R 0.0426343935403142
iterConfig: (array([ 0.84882467,  0.75481017, -1.48644566,  0.11021294,  1.37117331,
       -2.21752658,  0.02154889, -0.16378888,  2.21868843, -2.38281811,
       -1.51649971,  3.11676526,  1.64481417,  0.25295554,  1.66038467,
        2.96845445,  2.8376006 ,  0.78671038,  0.05154565,  0.39227905]),) 	temp[0]: [ 0.84882467  0.75481017 -1.48644566  0.11021294  1.37117331 -2.21752658
  0.02154889 -0.16378888  2.21868843 -2.38281811 -1.51649971  3.11676526
  1.64481417  0.25295554  1.66038467  2.96845445  2.8376006   0.78671038
  0.05154565  0.39227905]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [0.8488246701698423, 0.7548101707275405, -1.486445655339741, 0.11021294496767986, 1.3711733081371298, -2.217526582277514, 0.02154889385412284, -0.16378887834829436, 2.218688432435857, -2.3828181134509685, -1.5164997140141272, 3.1167652551475644, 1.6448141650689792, 0.25295553801754256, 1.6603846670846183, 2.968454453082188, 2.8376005955885875, 0.7867103770246766, 0.05154565306174774, 0.3922790471020803]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9661104771326497   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0068487664975165   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9039695072442754   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0611066723090568   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0359973503956015   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0281938353915756   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9024815020348121   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0847703584213872   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8949072018452778   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9125573832003218   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0349177688768985   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9648306483220611   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9747409755184997   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0207698565306813   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0340777509416381   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8552835994969363   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9703582444508154   1.0   -0.0238732414637843
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [2.901972415742045, 1.0327248147614272, 0.24919778196692954, 0.17889156174817344, -0.7121783960151258, 1.1682969230657179, -2.5495201228560553, -1.518873054978108, -3.132660005025664, 0.8574212556938567, 2.5206980240902563, -2.0977231356027266, 0.013175809641914338, 0.14506299810043854, 0.13387899271617165, -0.23513060014973908, -2.3477002517077006, 1.6061079862569585, -0.56032005909882, 2.22840113556705]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9284126907081643   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0603977053820457   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0509821420183603   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0016151714420798   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0189964667406077   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.055102681729885   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9817648364205103   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0170899134365246   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.988530011955115   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.033998685365161   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0440030895509982   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9536266637345663   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9103518546036151   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.157842921164953   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9987656358385839   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0277239386218429   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0167906946827594   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9158772429224897   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9847601371520872   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.952273894679942   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.02576299963750529  last value of R 0.023731191638983833
mean of modulus of the order parameter, R, over 2T: 0.02576299963750529  last value of R 0.023731191638983833
iterConfig: (array([ 0.45436289,  3.03971441,  2.63964724, -2.13784423,  0.49565885,
        1.19315035, -1.09754104,  0.51602788, -2.98815395,  0.89557949,
       -2.04388495,  0.47462748, -1.49868793,  0.44378412,  0.13793589,
        2.37634486, -0.57568662,  1.47798996,  2.84355229, -2.84667072]),) 	temp[0]: [ 0.45436289  3.03971441  2.63964724 -2.13784423  0.49565885  1.19315035
 -1.09754104  0.51602788 -2.98815395  0.89557949 -2.04388495  0.47462748
 -1.49868793  0.44378412  0.13793589  2.37634486 -0.57568662  1.47798996
  2.84355229 -2.84667072]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [0.454362892165324, 3.0397144101350513, 2.639647237887454, -2.1378442330722827, 0.4956588515123719, 1.1931503506948191, -1.097541043555763, 0.5160278758406553, -2.9881539535357216, 0.8955794854963104, -2.043884947093736, 0.4746274834597304, -1.4986879311327563, 0.44378411749575974, 0.13793588649830202, 2.3763448638501616, -0.5756866235337617, 1.4779899562031886, 2.843552288422818, -2.846670717209082]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9005780727456086   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0260274964842346   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9292083244707398   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9744078637644701   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9916777889106767   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.034194162493648   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9574667190652216   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.03953285229739   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0228699582982166   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0589219228728974   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.049274509034646   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9455673031085183   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9713593790406119   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0700869060522304   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0848675750420476   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1334754081349347   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9932624185076656   1.0   -0.0238732414637843
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [0.46614888420865563, -1.5038875975681754, 2.8451364873162426, 0.30989304757523106, -2.418299858477908, -0.957663712515322, 1.396627667582739, 2.898846325357516, 2.4448786731318375, -0.38386182076150144, 1.9909213410586828, 3.0833907884805125, 2.207527759027176, 1.9737715552852642, -2.013314076733715, -2.3206851522449368, 1.1380846694191895, 2.488171488272121, -1.0471825229378422, 3.0740791701499868]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9663270858514563   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8995120973644678   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.036241584174358   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0666208282217293   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9073511003434246   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0448402505655967   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9620099944210413   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9406188863211461   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0175402588475317   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0117461129840786   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.041033421369578   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9369615279135097   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9638920463410778   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0517297536346766   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0831262940464423   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.015549863641778   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0783519460672109   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0404550751025436   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0069989504697325   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0653007475657856   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.031768555614320855  last value of R 0.032488382838009165
mean of modulus of the order parameter, R, over 2T: 0.031768555614320855  last value of R 0.032488382838009165
iterConfig: (array([-1.4137645 , -2.26082058, -0.74595194, -1.87302106,  0.09665831,
       -0.89249946,  2.40919142, -2.29280192,  0.0713708 , -2.10797869,
       -2.24996889, -1.74731547,  1.29978363, -1.48313463,  0.13496802,
       -3.04377736, -2.21617241,  1.52031451,  1.07227633,  2.91605025]),) 	temp[0]: [-1.4137645  -2.26082058 -0.74595194 -1.87302106  0.09665831 -0.89249946
  2.40919142 -2.29280192  0.0713708  -2.10797869 -2.24996889 -1.74731547
  1.29978363 -1.48313463  0.13496802 -3.04377736 -2.21617241  1.52031451
  1.07227633  2.91605025]

I am the delayer of PLL0, my neighbors (initially) have indexes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL0, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[0,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_0l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL0: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL0 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL1, my neighbors (initially) have indexes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL1, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[1,l] [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_1l= [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL1: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL1 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL2, my neighbors (initially) have indexes: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL2, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[2,l] [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_2l= [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL2: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL2 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL3, my neighbors (initially) have indexes: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL3, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[3,l] [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_3l= [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL3: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL3 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL4, my neighbors (initially) have indexes: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL4, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[4,l] [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_4l= [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL4: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL4 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL5, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL5, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[5,l] [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_5l= [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL5: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL5 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL6, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL6, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[6,l] [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_6l= [0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL6: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL6 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL7, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL7, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[7,l] [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_7l= [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL7: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL7 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL8, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL8, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[8,l] [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_8l= [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL8: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL8 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL9, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL9, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[9,l] [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_9l= [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
I am the loop filter of PLL9: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL9 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL10, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL10, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[10,l] [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_10l= [0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0]
I am the loop filter of PLL10: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL10 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL11, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL11, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[11,l] [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_11l= [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]
I am the loop filter of PLL11: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL11 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL12, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL12, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[12,l] [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_12l= [0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]
I am the loop filter of PLL12: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL12 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL13, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19]
I am the phase detector of PLL13, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[13,l] [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_13l= [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0]
I am the loop filter of PLL13: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL13 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL14, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]
I am the phase detector of PLL14, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[14,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_14l= [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0]
I am the loop filter of PLL14: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL14 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL15, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19]
I am the phase detector of PLL15, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[15,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_15l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]
I am the loop filter of PLL15: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL15 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL16, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19]
I am the phase detector of PLL16, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[16,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_16l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]
I am the loop filter of PLL16: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL16 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL17, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19]
I am the phase detector of PLL17, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[17,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_17l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
I am the loop filter of PLL17: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL17 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL18, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19]
I am the phase detector of PLL18, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[18,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_18l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL18: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL18 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

I am the delayer of PLL19, my neighbors (initially) have indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
I am the phase detector of PLL19, the frequency division is 1:
PD has different gains for each input signal! Hence: G_kl are introduced. CHECK THESE CASES AGAIN! self.G_kl[19,l] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
High frequency components assumed to be ideally damped!
Simulating coupling function h(.) of the phase-differences as specified in dictPLL. The individial feed-forward path gains are G_19l= [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
I am the loop filter of PLL19: first order, a=1. Friction coefficient set to 1.00.
I am the VCO of PLL19 with intrinsic frequency f=1.00 Hz and K=-0.02 Hz, initially in free running.
VCO output noise with variance=1.00000E-03 and std=3.16228E-02 is enabled!
Setup PLL with injection locking signal! Initial self.K2nd_k= 0.3183098861837907 Hz

Maximum cross-coupling time delay: max_transmit_delay_steps: 1275 	max_feedback_delay_steps: 0
The perturbation will be set to dictNet[*phiPerturb*]= [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] , and dictNet[*phiInitConfig*]= [-1.4137645043109022, -2.2608205835200397, -0.7459519395373602, -1.8730210629516701, 0.09665830779837581, -0.8924994624012301, 2.4091914227145423, -2.2928019222042826, 0.07137080385446071, -2.1079786856585994, -2.249968892415041, -1.7473154660001968, 1.2997836281068835, -1.4831346342708929, 0.13496802444433786, -3.043777361750939, -2.216172410147558, 1.5203145083422829, 1.0722763303196485, 2.916050252198424]
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.004382024055478   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9611449566656669   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9240960357225096   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9361541654651155   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9720867606633916   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1095694984242372   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.004676085131868   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.068711985964874   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0876204606210509   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9786338316778934   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0835020870747778   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9836674876852547   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0252702830803644   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0666876524406164   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.043268013388127   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0192069472473695   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9396558490989314   1.0   -0.0238732414637843time needed for execution of simulations in multiproc mode:  16561.331770420074  seconds
For smoothing of phase-differences and order parameters we average over 1.50 periods of the ensemble mean intrinsic frequency.
For evaluation of asymptotic order parameter we average over 1.50 periods of the ensemble mean intrinsic frequency.
mean of modulus of the order parameter, R, over 2T: 0.016168972510870464  last value of R 0.006031968876119848
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.17
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.98
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.43
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.49
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.79
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.23
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.03
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.91
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.22
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.83
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.21
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.98
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=0.96
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.35
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.63
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.72
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.10
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.88
Realization 0, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=3.08
min_std: 0.00017393500243890653
Realization 0, order_param_std_threshold to 0.00034, for {min_std, max_std} = {0.0002,0.0024} 
working on realization 0 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-2.769649876874177, -2.2444663340089974, -2.655068845803956, -2.6768671021725723, 0.11989649569125804, 2.8015094440547985, 1.751754349201767, 1.9765487591492246, 0.7216849788176445, 3.0667618724545562, -1.4542893706051774, 0.4412185128350483, -0.34264341301752577, 2.206095815214028, -0.06317110951969385, 2.5157947651618757, -0.22119172652687835, 2.42050517175882, 1.1087535507260284, 2.0256714808377696], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e37b11dd0>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8896., 8894., 8895., ..., 8892., 8894., 8894.],
       [8896., 8894., 8895., ..., 8892., 8894., 8894.],
       [8896., 8894., 8895., ..., 8892., 8894., 8894.]]), 'phi': array([[7.75211590e-02, 7.02705320e-01, 0.00000000e+00, ...,
        5.32461230e+00, 4.03742201e+00, 4.90216335e+00],
       [1.30689136e-01, 7.54844077e-01, 5.38178680e-02, ...,
        5.37644919e+00, 4.08984947e+00, 4.95032135e+00],
       [1.77141471e-01, 8.05246654e-01, 1.06372807e-01, ...,
        5.42257229e+00, 4.13864298e+00, 4.99688626e+00],
       ...,
       [2.80135865e+04, 2.80074765e+04, 2.80102683e+04, ...,
        2.80072239e+04, 2.80107135e+04, 2.80104438e+04],
       [2.80136406e+04, 2.80075280e+04, 2.80103183e+04, ...,
        2.80072702e+04, 2.80107618e+04, 2.80104913e+04],
       [2.80136941e+04, 2.80075756e+04, 2.80103654e+04, ...,
        2.80073200e+04, 2.80108164e+04, 2.80105428e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.23509478, 0.23460084, 0.23476671, ..., 0.0054827 , 0.00631432,
       0.00603197]), 'R': array([0.02156752, 0.02156584, 0.0219218 , 0.02138547, 0.02178356,
       0.02129235, 0.02212168, 0.02183563, 0.02215666, 0.02186277,
       0.02249745, 0.02362502, 0.02387231, 0.02403139, 0.02396269,
       0.02451375, 0.02429361, 0.02446318, 0.02476297, 0.02465522,
       0.02417179, 0.02392066, 0.02413757, 0.02442725, 0.02481374,
       0.02514912, 0.0248641 , 0.02496164, 0.02426389, 0.02355712,
       0.02289033, 0.02337308, 0.02340367, 0.02339422, 0.02405806,
       0.02514497, 0.02454172, 0.02440149, 0.02399394, 0.02311232,
       0.02275102, 0.02246443, 0.02187634, 0.02106491, 0.02066275,
       0.02076825, 0.02032317, 0.02003756, 0.01913164, 0.01915476,
       0.01904786, 0.01855899, 0.01816613, 0.01811369, 0.01836841,
       0.01786699, 0.01773134, 0.01689818, 0.01708638, 0.01736746,
       0.01743956, 0.01765939, 0.01775068, 0.01766865, 0.01760784,
       0.01882614, 0.01890389, 0.01874205, 0.01815526, 0.01833267,
       0.01883239, 0.01902828, 0.01897533, 0.01918483, 0.01847628,
       0.01857577, 0.01878212, 0.01862411, 0.01823385, 0.01773251,
       0.01783683, 0.01803501, 0.01762808, 0.01772881, 0.01745944,
       0.01755693, 0.01764479, 0.01737915, 0.01823862, 0.01800894,
       0.01763818, 0.01831184, 0.0184101 , 0.01849771, 0.01809038,
       0.01808416, 0.01869966, 0.01859839, 0.01911659, 0.01947215,
       0.01915185, 0.01983064, 0.01996049, 0.0202361 , 0.01995097,
       0.02012163, 0.02006897, 0.02061067, 0.02092512, 0.02090416,
       0.02068064, 0.02029342, 0.02052702, 0.02149376, 0.02119458,
       0.02059499, 0.02043259, 0.02013842, 0.02024291, 0.02075051,
       0.02029157, 0.01980987, 0.02016888, 0.02047299, 0.02024245,
       0.02051107, 0.02035602, 0.02112913, 0.0211491 , 0.02182964,
       0.02184199, 0.02130047, 0.02118656, 0.02098127, 0.02034103,
       0.02037728, 0.02133004, 0.02160946, 0.02107308, 0.02082032,
       0.0206484 , 0.02170615, 0.02060292, 0.02109664, 0.0217844 ,
       0.02196746, 0.02230984, 0.02258506, 0.02215537, 0.0220298 ,
       0.02253165, 0.02218944, 0.02264831, 0.0225864 , 0.0220822 ,
       0.02186011, 0.02227745, 0.02284508, 0.02261343, 0.02216193,
       0.02318215, 0.02344222, 0.02316249, 0.02294009, 0.02291919,
       0.02182881, 0.02174387, 0.02116504, 0.02066552, 0.0202261 ,
       0.01979337, 0.0194405 , 0.01932131, 0.01880256, 0.01852849,
       0.01852648, 0.01854619, 0.01831279, 0.01804753, 0.01772439,
       0.01797135, 0.01774649, 0.01838701, 0.01809542, 0.01823964,
       0.01797716, 0.01880462, 0.01862397, 0.01860013, 0.01864096,
       0.01849804, 0.01803188, 0.01810449, 0.01738848, 0.01674961,
       0.01656138, 0.01590729, 0.01626507, 0.01544161, 0.01510281,
       0.01529093, 0.01587976, 0.01683755, 0.01580318, 0.01590025,
       0.01565968, 0.01625113, 0.01659039, 0.01693365, 0.01781257,
       0.01797275, 0.01860653, 0.01883119, 0.018763  , 0.01828525,
       0.01775131, 0.01789881, 0.01842289, 0.0175357 , 0.01767225,
       0.0171175 , 0.01785259, 0.01775064, 0.01683471, 0.01727376,
       0.01773505, 0.01779134, 0.01697095, 0.01728222, 0.01809142,
       0.01742925, 0.01772275, 0.01701162, 0.01727333, 0.01676178,
       0.01628593, 0.01610089, 0.01615804, 0.01659399, 0.01611653,
       0.01552843, 0.01494841, 0.01448483, 0.01450347, 0.01405454,
       0.0133723 , 0.01313393, 0.01292661, 0.01301041, 0.01351454,
       0.01349029, 0.01367249, 0.01309285, 0.01260618, 0.01211263,
       0.01236278, 0.01203144, 0.01232026, 0.01258738, 0.01245533,
       0.01205054, 0.01171743, 0.01190066, 0.0115009 , 0.01144133,
       0.01135976, 0.01253074, 0.012112  , 0.01157186, 0.01158391,
       0.011414  , 0.01175114, 0.0110251 , 0.01173212, 0.01166572,
       0.01130989, 0.01178669, 0.01203838, 0.01143495, 0.01123806,
       0.0113307 , 0.01111504, 0.01092036, 0.0109184 , 0.01095741,
       0.01066539, 0.01089951, 0.01038244, 0.00984481, 0.0096696 ,
       0.00996941, 0.01067233, 0.01030722, 0.00992252, 0.00910018,
       0.00893193, 0.0085379 , 0.00832049, 0.0084418 , 0.00846742,
       0.00823345, 0.00856125, 0.00875168, 0.00856129, 0.00834709,
       0.00828179, 0.00833944, 0.00863005, 0.00855354, 0.0088825 ,
       0.00880948, 0.00927762, 0.00945773, 0.00906188, 0.00893558,
       0.008563  , 0.00808721, 0.00830176, 0.00830262, 0.008217  ,
       0.00845215, 0.00850931, 0.00864261, 0.00821171, 0.00769687,
       0.0077604 , 0.00769725, 0.00721509, 0.00731273, 0.00750465,
       0.0071344 , 0.00779601, 0.00839052, 0.00832962, 0.00867114,
       0.00879917, 0.00887931, 0.00901095, 0.00867133, 0.00828857,
       0.00813001, 0.00843958, 0.00871363, 0.00889597, 0.00846286,
       0.00870644, 0.00837648, 0.00884075, 0.00906403, 0.00939619,
       0.00867763, 0.0085298 , 0.00807899, 0.00830864, 0.00835324,
       0.00750054, 0.00759509, 0.00734957, 0.00688025, 0.00761665,
       0.00677134, 0.00705125, 0.00687479, 0.00673219, 0.00671938,
       0.00625015, 0.00612625, 0.00664445, 0.00590807, 0.00563427,
       0.00535503, 0.00559082, 0.0054827 , 0.00631432, 0.00603197]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.03786282685878572  last value of R 0.03766814026848744
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.06
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.86
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.56
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.52
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.80
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.20
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.02
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.86
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.20
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.99
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.08
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-2.17
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=0.76
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.63
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.20
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-3.10
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=-0.27
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.72
Realization 1, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.52
min_std: 0.00015269694700536471
Realization 1, order_param_std_threshold to 0.00025, for {min_std, max_std} = {0.0002,0.0015} 
working on realization 1 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [2.407825761923914, -0.07434016037591906, -1.9900990981224231, 2.2708739219464595, -0.786358346483305, -2.900978343611749, 0.9686731990161226, -1.351418822433934, -1.4508748115356989, 1.6629527934568609, 2.336832888006729, 0.25207585559734236, -0.4773731723284764, -1.8726966789307145, -0.8698108040721895, 1.061686896032863, -1.5816848522300273, -2.023203850105728, -0.9097826807599234, -1.3664698826558301], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e37b21d90>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8895., 8894., 8893., ..., 8893., 8893., 8891.],
       [8895., 8894., 8893., ..., 8893., 8893., 8892.],
       [8895., 8894., 8893., ..., 8893., 8893., 8892.]]), 'phi': array([[5.50840420e+00, 3.02229658e+00, 8.74062112e-01, ...,
        9.70678151e-01, 2.22324551e+00, 1.53310559e+00],
       [5.55962502e+00, 3.07322984e+00, 9.24645303e-01, ...,
        1.02277838e+00, 2.27084293e+00, 1.58357923e+00],
       [5.61119815e+00, 3.12343421e+00, 9.72449003e-01, ...,
        1.07889370e+00, 2.32086450e+00, 1.63571376e+00],
       ...,
       [2.80158654e+04, 2.80095611e+04, 2.80061440e+04, ...,
        2.80035126e+04, 2.80068403e+04, 2.80007300e+04],
       [2.80159125e+04, 2.80096099e+04, 2.80061868e+04, ...,
        2.80035648e+04, 2.80068901e+04, 2.80007774e+04],
       [2.80159574e+04, 2.80096589e+04, 2.80062348e+04, ...,
        2.80036117e+04, 2.80069358e+04, 2.80008194e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.24401079, 0.24416117, 0.24461899, ..., 0.03871527, 0.0380524 ,
       0.03766814]), 'R': array([0.03236353, 0.03225478, 0.03242698, 0.0321131 , 0.03200719,
       0.03236581, 0.03226472, 0.03218608, 0.03248733, 0.0329046 ,
       0.03275233, 0.03277657, 0.03332976, 0.03275693, 0.03246921,
       0.03279686, 0.03275241, 0.03259581, 0.03256899, 0.0329793 ,
       0.03362091, 0.03413561, 0.03423889, 0.03403071, 0.03421836,
       0.03458477, 0.03454341, 0.0342449 , 0.03440044, 0.03469928,
       0.03454775, 0.03445601, 0.03478465, 0.03528128, 0.03548548,
       0.03503562, 0.03512291, 0.03551161, 0.03621969, 0.03643499,
       0.03573401, 0.03581886, 0.03507457, 0.03537135, 0.03522563,
       0.03532271, 0.03511677, 0.03512207, 0.03508705, 0.03520772,
       0.03514152, 0.03552749, 0.03532234, 0.0354384 , 0.0357355 ,
       0.03595543, 0.03582826, 0.03613542, 0.03563244, 0.03575995,
       0.03570561, 0.03580815, 0.03584168, 0.03567354, 0.03622358,
       0.03670303, 0.0372098 , 0.03804752, 0.03840715, 0.03848602,
       0.03920423, 0.04031076, 0.04045085, 0.04051735, 0.04095355,
       0.04153537, 0.04158746, 0.04078777, 0.04047608, 0.04042648,
       0.04118133, 0.04098329, 0.04077315, 0.04060229, 0.04079731,
       0.04080712, 0.04198326, 0.0415414 , 0.0407994 , 0.03980602,
       0.03915644, 0.03896524, 0.0386336 , 0.03823254, 0.03809688,
       0.03845591, 0.03832663, 0.03933319, 0.03931928, 0.03963216,
       0.0385125 , 0.03874849, 0.03939041, 0.03979175, 0.03925938,
       0.03855006, 0.03794235, 0.03735628, 0.03806389, 0.03759472,
       0.03734265, 0.03755403, 0.03719211, 0.0374226 , 0.03733637,
       0.03787354, 0.03787448, 0.03824697, 0.03872143, 0.03889533,
       0.03847863, 0.03807471, 0.03856233, 0.03869748, 0.03828222,
       0.03873709, 0.03850955, 0.03826639, 0.03775432, 0.03816036,
       0.03833784, 0.03857695, 0.03834475, 0.03749351, 0.03680708,
       0.03649193, 0.03661298, 0.03649581, 0.03676379, 0.03668327,
       0.03655873, 0.03626806, 0.03587267, 0.03659468, 0.03665781,
       0.03600354, 0.03614847, 0.03661868, 0.03642486, 0.03579307,
       0.03578809, 0.03574843, 0.03579057, 0.03546855, 0.03577999,
       0.03586315, 0.03594995, 0.0360448 , 0.0357395 , 0.03496219,
       0.03542781, 0.03511778, 0.03538874, 0.03543959, 0.03531259,
       0.03503451, 0.03552619, 0.03523193, 0.0354131 , 0.03501853,
       0.03532991, 0.03575534, 0.03592763, 0.03583041, 0.03619243,
       0.03593449, 0.03610475, 0.03584406, 0.03547026, 0.03563216,
       0.03512841, 0.0344917 , 0.03441962, 0.03408512, 0.03478684,
       0.03497056, 0.03528069, 0.03552583, 0.03550567, 0.03567305,
       0.03553654, 0.03534997, 0.03537609, 0.03539438, 0.03543884,
       0.03543728, 0.03511866, 0.03539597, 0.03598526, 0.03599864,
       0.03663188, 0.03606122, 0.03601905, 0.03614156, 0.03613445,
       0.03606166, 0.03621211, 0.03641389, 0.03741845, 0.03733452,
       0.03780666, 0.03758076, 0.03701442, 0.03640886, 0.03694542,
       0.03744525, 0.03740616, 0.03799635, 0.03858617, 0.03896739,
       0.03852048, 0.03836328, 0.03879502, 0.03938076, 0.03945571,
       0.03933642, 0.03890026, 0.03834513, 0.03846385, 0.03815645,
       0.03831076, 0.03764271, 0.03714284, 0.03667758, 0.03632228,
       0.03607129, 0.0368633 , 0.03675874, 0.03724473, 0.03707967,
       0.03663473, 0.03702532, 0.03681098, 0.03715873, 0.03750484,
       0.03730453, 0.03696431, 0.03718347, 0.03733978, 0.03742894,
       0.03729687, 0.03768521, 0.03798207, 0.03896215, 0.0390219 ,
       0.03932455, 0.03912409, 0.04013832, 0.04079209, 0.04115836,
       0.04029973, 0.04106901, 0.04143456, 0.04206637, 0.0420356 ,
       0.04203915, 0.04238819, 0.04276776, 0.04302704, 0.04348242,
       0.04325882, 0.04325155, 0.0440117 , 0.04371157, 0.04402047,
       0.04367111, 0.04310975, 0.04316695, 0.0432118 , 0.04300238,
       0.04239046, 0.04224501, 0.04221713, 0.0422075 , 0.04232231,
       0.04206082, 0.0418489 , 0.04170153, 0.0417501 , 0.04135227,
       0.04155428, 0.04166746, 0.04092161, 0.0403262 , 0.03989243,
       0.03998736, 0.03963142, 0.0394369 , 0.03929499, 0.03882683,
       0.03884483, 0.03922183, 0.03921424, 0.039109  , 0.03819374,
       0.03856927, 0.03819093, 0.03881814, 0.03894555, 0.03927691,
       0.03882123, 0.039173  , 0.03862741, 0.03917524, 0.03871405,
       0.03871371, 0.03933583, 0.03928758, 0.03925382, 0.03974284,
       0.04026986, 0.04042377, 0.04053657, 0.04116583, 0.04114488,
       0.0407479 , 0.04078439, 0.04109036, 0.0401674 , 0.04003515,
       0.04011215, 0.03969113, 0.04031701, 0.0410177 , 0.04099618,
       0.04141226, 0.04186452, 0.04140589, 0.04148119, 0.04188119,
       0.04132162, 0.04087415, 0.0410483 , 0.04176814, 0.04206381,
       0.04216093, 0.04206142, 0.04117361, 0.04107211, 0.04029436,
       0.04023671, 0.04033168, 0.04004663, 0.04021348, 0.03976107,
       0.03949993, 0.03937328, 0.03939526, 0.03870546, 0.03883845,
       0.03873953, 0.03827404, 0.0379537 , 0.037544  , 0.03725872,
       0.03675005, 0.03745103, 0.03750592, 0.03784395, 0.03889989,
       0.03895639, 0.03921506, 0.03871527, 0.0380524 , 0.03766814]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.010590848696774405  last value of R 0.006525984275910111
Order parameter predicted for solution=0.00 has been reached. Averaged over last 1 periods of the intrinsic frequency for realization 2.
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.10
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.94
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.49
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.47
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.92
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.06
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.17
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.71
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.41
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.82
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.37
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.85
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.15
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.27
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.69
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.64
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.14
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=3.06
Realization 2, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.91
min_std: 0.00016779071642152913
Realization 2, order_param_std_threshold to 0.00069, for {min_std, max_std} = {0.0002,0.0072} 
working on realization 2 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [1.480790628390844, 2.3536469473505814, -1.517200289933681, 2.206455302898381, 2.114885705215703, 2.3368771837587543, -2.568436585813427, 2.4388267109526724, 2.835496400439496, 1.4479046889919562, 1.6767534546040705, -2.3288686256828495, -2.2478627463513736, 2.515495547245994, 1.375735659807705, 2.412107355871985, 2.453889066854461, -0.4878504912700663, -2.2438857798075023, 1.7738163565330893], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e37b46b10>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8893., 8893., ..., 8892., 8894., 8895.],
       [8894., 8893., 8893., ..., 8892., 8894., 8895.],
       [8894., 8893., 8893., ..., 8892., 8894., 8895.]]), 'phi': array([[3.99546305e+00, 4.73580628e+00, 1.03014046e+00, ...,
        2.15381354e+00, 2.45249855e-01, 4.41210728e+00],
       [4.04650503e+00, 4.79256588e+00, 1.08104829e+00, ...,
        2.20639318e+00, 2.93863639e-01, 4.46197564e+00],
       [4.09782671e+00, 4.84157479e+00, 1.13376859e+00, ...,
        2.25175824e+00, 3.47203406e-01, 4.50886051e+00],
       ...,
       [2.80095694e+04, 2.80096889e+04, 2.80062527e+04, ...,
        2.80031674e+04, 2.80064812e+04, 2.80128996e+04],
       [2.80096199e+04, 2.80097285e+04, 2.80063044e+04, ...,
        2.80032178e+04, 2.80065263e+04, 2.80129482e+04],
       [2.80096678e+04, 2.80097727e+04, 2.80063479e+04, ...,
        2.80032648e+04, 2.80065687e+04, 2.80129976e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.52415024, 0.5245062 , 0.52434567, ..., 0.00698575, 0.00688428,
       0.00652598]), 'R': array([0.01116723, 0.01172446, 0.01180196, 0.01182631, 0.01177529,
       0.01179691, 0.01189375, 0.01277093, 0.01228971, 0.01231005,
       0.012024  , 0.01238604, 0.01232579, 0.01241645, 0.01297793,
       0.01273658, 0.01184552, 0.01227938, 0.01286385, 0.01349209,
       0.01403938, 0.01396786, 0.0138184 , 0.01307247, 0.01324994,
       0.01349962, 0.01356141, 0.0132222 , 0.0132567 , 0.01340412,
       0.01354   , 0.01324608, 0.01259592, 0.01302326, 0.01309046,
       0.01301436, 0.01274028, 0.01275615, 0.01367645, 0.01359934,
       0.0135825 , 0.01324687, 0.01319584, 0.01288364, 0.012953  ,
       0.01263199, 0.01268062, 0.01303022, 0.01258509, 0.01274753,
       0.01264702, 0.01253861, 0.01315111, 0.01336024, 0.01304853,
       0.01312165, 0.01357515, 0.01390102, 0.01341888, 0.01379342,
       0.01361813, 0.01308728, 0.01282903, 0.01252303, 0.01209568,
       0.0123417 , 0.01211594, 0.01217381, 0.01213348, 0.01198405,
       0.01189044, 0.01129116, 0.01131143, 0.01157004, 0.01156188,
       0.0109548 , 0.01122172, 0.01139942, 0.01145599, 0.01146583,
       0.01140329, 0.01122248, 0.01164089, 0.01116901, 0.0114124 ,
       0.0112503 , 0.01132997, 0.01130649, 0.01105205, 0.01086337,
       0.0105554 , 0.01008837, 0.01053469, 0.01091374, 0.01094922,
       0.01088   , 0.01076213, 0.01059565, 0.01035158, 0.01032317,
       0.01091028, 0.01078782, 0.01090712, 0.01121401, 0.01093633,
       0.0113539 , 0.01113129, 0.01114624, 0.01077843, 0.01082746,
       0.01062132, 0.01027515, 0.01039375, 0.01043645, 0.01015167,
       0.00987118, 0.01011915, 0.00954191, 0.00994416, 0.00971951,
       0.00989055, 0.0092746 , 0.00933249, 0.00909636, 0.00860874,
       0.00914349, 0.0092721 , 0.00954851, 0.00978299, 0.00994297,
       0.01024615, 0.01065946, 0.01090043, 0.01099471, 0.01144973,
       0.01159813, 0.01170609, 0.01173757, 0.01184624, 0.01134518,
       0.01114309, 0.01098277, 0.01059366, 0.01101389, 0.01096462,
       0.01093922, 0.01073022, 0.01084362, 0.01117387, 0.0115275 ,
       0.01132825, 0.01154796, 0.01149484, 0.01132356, 0.01117785,
       0.01168622, 0.01150376, 0.01134263, 0.01116492, 0.01104626,
       0.01119673, 0.01117145, 0.01110413, 0.01024803, 0.00982211,
       0.00985947, 0.00976248, 0.00977515, 0.00976271, 0.01011065,
       0.01034736, 0.01032768, 0.01004376, 0.01026155, 0.0104776 ,
       0.01063772, 0.01087591, 0.01103754, 0.01120815, 0.0113988 ,
       0.01154346, 0.01102783, 0.01165764, 0.01188875, 0.01209624,
       0.0126224 , 0.0120801 , 0.011867  , 0.01195285, 0.01208092,
       0.011489  , 0.0113865 , 0.01148459, 0.01172105, 0.01159619,
       0.01152637, 0.01133675, 0.01143834, 0.01132904, 0.01143652,
       0.01199646, 0.01195049, 0.01165686, 0.01222635, 0.01172616,
       0.01133449, 0.01092992, 0.01111419, 0.01115114, 0.01084963,
       0.01046555, 0.01068503, 0.01024915, 0.01051493, 0.0105356 ,
       0.01057964, 0.01090208, 0.01092635, 0.01087389, 0.01111201,
       0.01143193, 0.01178518, 0.01206265, 0.01193366, 0.01229812,
       0.01279047, 0.01201263, 0.01101733, 0.01140984, 0.01125819,
       0.01130225, 0.01106072, 0.01105734, 0.01102888, 0.01090101,
       0.01049308, 0.01083489, 0.01126674, 0.01082589, 0.01008198,
       0.01049096, 0.0107411 , 0.00996977, 0.00995605, 0.0107448 ,
       0.01090185, 0.01132326, 0.01183822, 0.01180886, 0.01205153,
       0.01199153, 0.01084596, 0.01140052, 0.01196167, 0.01250962,
       0.01255896, 0.01150916, 0.01139974, 0.01108152, 0.01158203,
       0.01179811, 0.01144385, 0.01133772, 0.01149259, 0.01117778,
       0.01099254, 0.01063441, 0.01087809, 0.01078551, 0.01090348,
       0.01084745, 0.01140832, 0.01038589, 0.01100492, 0.01110935,
       0.01120154, 0.01101397, 0.01083328, 0.01039576, 0.01042572,
       0.01055031, 0.01092478, 0.01156104, 0.01162697, 0.01156621,
       0.01102824, 0.01101574, 0.01019492, 0.01019585, 0.01006756,
       0.00987589, 0.01031073, 0.00946269, 0.01045518, 0.01094727,
       0.01049689, 0.01088988, 0.01019636, 0.00988262, 0.00860376,
       0.007851  , 0.00762249, 0.0077096 , 0.00690763, 0.00656728,
       0.00631694, 0.00647798, 0.00644938, 0.00693185, 0.00704721,
       0.00695975, 0.00669476, 0.00662717, 0.00642342, 0.00646827,
       0.00611448, 0.00622557, 0.00580213, 0.00629815, 0.00679729,
       0.00697145, 0.00699955, 0.00745162, 0.00747137, 0.00758316,
       0.0074943 , 0.00708977, 0.00736761, 0.00794757, 0.00728473,
       0.00714495, 0.00660878, 0.00634506, 0.00654535, 0.00629896,
       0.00680509, 0.00792766, 0.00789155, 0.00812862, 0.0079015 ,
       0.00777189, 0.00828996, 0.00872212, 0.0091302 , 0.00929421,
       0.00912856, 0.00895057, 0.00883428, 0.00852083, 0.00835601,
       0.00777641, 0.00797715, 0.00845565, 0.00830272, 0.00848843,
       0.00801175, 0.00823088, 0.00795916, 0.00750691, 0.00759341,
       0.00798953, 0.00792932, 0.00743772, 0.00742346, 0.00680668,
       0.00663307, 0.00683833, 0.00629145, 0.00606647, 0.00655391,
       0.00693098, 0.00743283, 0.00698575, 0.00688428, 0.00652598]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.017465419040225114  last value of R 0.020426686075672308
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.00
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.72
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.64
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.28
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.13
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.87
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.42
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.75
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.56
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.67
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.46
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.68
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.27
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.03
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.88
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.47
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.50
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.98
Realization 3, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.89
min_std: 0.0002062349758514738
Realization 3, order_param_std_threshold to 0.00047, for {min_std, max_std} = {0.0002,0.0038} 
working on realization 3 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-1.4174394726941946, -0.044365171338012654, -1.7497972361229746, 0.22344387595392767, -0.08718558716962477, 0.7957876932508969, -2.5667239071806196, 1.9784280001268204, -0.2230028434306508, -2.2279840224973135, -2.1234977447070627, -0.9827502608797127, 2.7594337803373463, -3.0686743690648153, 2.0965164405893457, 0.9906680911341619, -2.357021936997949, 1.468546553462442, -2.7011466331654383, -0.14023080384837305], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e37b35c10>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8893., 8893., ..., 8893., 8893., 8894.],
       [8894., 8893., 8893., ..., 8893., 8893., 8894.],
       [8894., 8894., 8893., ..., 8893., 8893., 8894.]]), 'phi': array([[1.58202975e+00, 3.20277483e+00, 1.25511230e+00, ...,
        4.42708099e+00, 2.73867329e-01, 2.96603620e+00],
       [1.63139392e+00, 3.25534483e+00, 1.30417225e+00, ...,
        4.47715120e+00, 3.21231850e-01, 3.01736472e+00],
       [1.67739115e+00, 3.30863918e+00, 1.35590045e+00, ...,
        4.52453506e+00, 3.68894259e-01, 3.06552394e+00],
       ...,
       [2.80083422e+04, 2.80083374e+04, 2.80047208e+04, ...,
        2.80077968e+04, 2.80050046e+04, 2.80112179e+04],
       [2.80083934e+04, 2.80083923e+04, 2.80047697e+04, ...,
        2.80078493e+04, 2.80050576e+04, 2.80112728e+04],
       [2.80084444e+04, 2.80084478e+04, 2.80048238e+04, ...,
        2.80079032e+04, 2.80051110e+04, 2.80113276e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.06772854, 0.06718099, 0.0672248 , ..., 0.02027374, 0.02020594,
       0.02042669]), 'R': array([0.02043971, 0.02071504, 0.02052182, 0.02026178, 0.02042351,
       0.020888  , 0.0212174 , 0.0208377 , 0.01997262, 0.02033869,
       0.02033901, 0.02024863, 0.02046298, 0.02050098, 0.02044843,
       0.02011471, 0.02009527, 0.01998703, 0.01983561, 0.02012562,
       0.01991183, 0.02012288, 0.02017512, 0.01976842, 0.01917418,
       0.01950776, 0.01861932, 0.01901469, 0.01838155, 0.01724133,
       0.01653244, 0.01632964, 0.01661309, 0.01688704, 0.01688824,
       0.01657212, 0.01690953, 0.01681836, 0.01642487, 0.01619646,
       0.01701969, 0.0175141 , 0.01730099, 0.01649711, 0.01682035,
       0.01671251, 0.0167101 , 0.01642534, 0.01634503, 0.01589194,
       0.01525342, 0.01462426, 0.01525302, 0.01524389, 0.01491763,
       0.01464383, 0.0152578 , 0.01534101, 0.01523639, 0.01555761,
       0.01520357, 0.01482174, 0.01487445, 0.01520463, 0.01538339,
       0.01535103, 0.01635896, 0.01697495, 0.01746999, 0.01725767,
       0.0177243 , 0.01803497, 0.01748389, 0.0175204 , 0.01717832,
       0.01693376, 0.01687899, 0.01640337, 0.01646559, 0.01567719,
       0.01615248, 0.01619935, 0.01673238, 0.01651575, 0.01647209,
       0.01640529, 0.01640162, 0.01619031, 0.01587758, 0.01595259,
       0.0158129 , 0.01608933, 0.01611218, 0.01571356, 0.01531848,
       0.01585256, 0.01610306, 0.01635071, 0.01669977, 0.01680343,
       0.0172926 , 0.01716181, 0.01728248, 0.01750946, 0.0181043 ,
       0.01838437, 0.01915728, 0.01938112, 0.01935957, 0.01916667,
       0.01844429, 0.01813146, 0.01783946, 0.01773034, 0.01733083,
       0.01737374, 0.01744857, 0.01690234, 0.01723179, 0.01729151,
       0.01757992, 0.01730804, 0.01741488, 0.01761389, 0.01749473,
       0.017029  , 0.01715348, 0.01697467, 0.0170012 , 0.01703488,
       0.01770473, 0.01774306, 0.01706945, 0.01696721, 0.01685802,
       0.01621874, 0.0160519 , 0.01599182, 0.01617134, 0.01646325,
       0.01631354, 0.01594935, 0.01577721, 0.0156037 , 0.01588538,
       0.01588089, 0.01579127, 0.01556846, 0.01561713, 0.01538381,
       0.01516771, 0.01494696, 0.01469264, 0.01507811, 0.0151628 ,
       0.01493229, 0.01478607, 0.01476199, 0.01521318, 0.01609908,
       0.01627449, 0.01547673, 0.01560025, 0.01595119, 0.01608294,
       0.01594053, 0.0160869 , 0.01681607, 0.01694035, 0.01664908,
       0.01660678, 0.01660759, 0.01638414, 0.01674327, 0.0165728 ,
       0.01617847, 0.01605142, 0.01680776, 0.0167703 , 0.01709112,
       0.01691366, 0.01650145, 0.01607482, 0.01633312, 0.01634539,
       0.01634881, 0.01614907, 0.01617848, 0.01604544, 0.01645017,
       0.01691476, 0.01712659, 0.017836  , 0.01765837, 0.01769922,
       0.01769936, 0.01717367, 0.01649451, 0.01629109, 0.01629764,
       0.01621928, 0.01590639, 0.01598657, 0.01658068, 0.016971  ,
       0.01652765, 0.01647198, 0.01664505, 0.01697705, 0.01751121,
       0.01745557, 0.01784262, 0.01767081, 0.01644692, 0.01645984,
       0.01681107, 0.01689364, 0.01663032, 0.01679053, 0.01684257,
       0.01679675, 0.01750487, 0.01746196, 0.01735045, 0.01749054,
       0.01759362, 0.01773041, 0.01756618, 0.0176882 , 0.01783749,
       0.01797425, 0.01781191, 0.01808232, 0.01847607, 0.0186458 ,
       0.0186165 , 0.01915456, 0.01914469, 0.01908034, 0.0189281 ,
       0.01973282, 0.0197878 , 0.01967942, 0.01984948, 0.01992026,
       0.02026283, 0.02073667, 0.02093622, 0.02056733, 0.0202124 ,
       0.0202199 , 0.01990693, 0.01946586, 0.01974638, 0.0195984 ,
       0.0200887 , 0.02034254, 0.01997231, 0.02016262, 0.02057579,
       0.02094479, 0.02092612, 0.02052326, 0.01961019, 0.01940598,
       0.0192249 , 0.01942696, 0.01929074, 0.0188681 , 0.01861066,
       0.01831391, 0.01772134, 0.01708876, 0.0169167 , 0.01615622,
       0.01597296, 0.01605581, 0.01598284, 0.01560215, 0.0157898 ,
       0.01609819, 0.01560861, 0.01542243, 0.01594846, 0.01606328,
       0.01618872, 0.01570516, 0.01629546, 0.01654848, 0.01691184,
       0.01744606, 0.01745239, 0.01794975, 0.01751105, 0.01736616,
       0.01778492, 0.01799099, 0.01812308, 0.01829576, 0.01819996,
       0.01865717, 0.01856375, 0.01810811, 0.01851103, 0.01875498,
       0.01881362, 0.0188737 , 0.01895752, 0.01820762, 0.01800294,
       0.01818264, 0.01823496, 0.01844846, 0.01813468, 0.01796552,
       0.01818364, 0.01840892, 0.01842509, 0.01821917, 0.0184153 ,
       0.01816196, 0.0182853 , 0.01793864, 0.01792882, 0.01771217,
       0.01735104, 0.0171455 , 0.01710581, 0.01700636, 0.01702026,
       0.01734844, 0.01695133, 0.01700097, 0.01734889, 0.01725895,
       0.01731226, 0.01719313, 0.01649299, 0.01668484, 0.01668697,
       0.01640788, 0.01644136, 0.01679175, 0.01685541, 0.01740837,
       0.01722172, 0.01738146, 0.0178603 , 0.01781034, 0.01727086,
       0.0171466 , 0.01667761, 0.01683713, 0.01700548, 0.01729904,
       0.01786621, 0.01779649, 0.0174737 , 0.01779091, 0.01743556,
       0.01795992, 0.01825746, 0.01827527, 0.01819861, 0.01824439,
       0.01855085, 0.01812462, 0.01881473, 0.01893581, 0.01919073,
       0.01902101, 0.02005781, 0.02027374, 0.02020594, 0.02042669]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.017295424919620835  last value of R 0.018042855151724685
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.01
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.80
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.54
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.42
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.93
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.14
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.07
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-2.01
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.10
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-2.00
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.04
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-2.28
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=0.76
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.59
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.37
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.92
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=-0.06
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.86
Realization 4, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.87
min_std: 0.0001904964577648081
Realization 4, order_param_std_threshold to 0.00036, for {min_std, max_std} = {0.0002,0.0025} 
working on realization 4 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-1.2299369563709088, -2.907938146337287, -2.9800100939505905, -2.1412198801488964, -1.3354197482070043, -1.490818563193998, 0.7258088460706795, 0.11975828121414889, 1.6664277674428956, -0.3665159026527669, 0.10956877167499135, -2.3048901152016215, 0.46298426367775836, 0.15061494748194715, 0.29258330739595806, -1.7884076853404736, -2.2945109436498705, 1.1930097573569753, -0.9945078809640826, 3.0139717831657835], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e37b11e10>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8895., 8895., 8894., ..., 8892., 8894., 8895.],
       [8895., 8895., 8894., ..., 8892., 8894., 8895.],
       [8895., 8895., 8894., ..., 8892., 8894., 8895.]]), 'phi': array([[1.84143931e+00, 2.66234408e-01, 0.00000000e+00, ...,
        4.34614224e+00, 2.28420105e+00, 6.25631094e+00],
       [1.89081855e+00, 3.18726060e-01, 4.69129447e-02, ...,
        4.39822220e+00, 2.33240902e+00, 6.30868526e+00],
       [1.94263940e+00, 3.70625047e-01, 9.86655504e-02, ...,
        4.44997678e+00, 2.38065756e+00, 6.35944325e+00],
       ...,
       [2.80113571e+04, 2.80113530e+04, 2.80078560e+04, ...,
        2.80051394e+04, 2.80085005e+04, 2.80147812e+04],
       [2.80114098e+04, 2.80114037e+04, 2.80079096e+04, ...,
        2.80051929e+04, 2.80085527e+04, 2.80148336e+04],
       [2.80114607e+04, 2.80114510e+04, 2.80079624e+04, ...,
        2.80052434e+04, 2.80086011e+04, 2.80148837e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.2411861 , 0.24141215, 0.24197961, ..., 0.01720463, 0.01755446,
       0.01804286]), 'R': array([0.01459775, 0.01448012, 0.01462359, 0.01428895, 0.014448  ,
       0.01423561, 0.01447085, 0.01485451, 0.01435549, 0.01424379,
       0.01435167, 0.01298539, 0.01268689, 0.01198843, 0.0117212 ,
       0.01160049, 0.01159572, 0.01147801, 0.01128576, 0.01179725,
       0.01120429, 0.01185157, 0.01163019, 0.01129647, 0.01152189,
       0.01207438, 0.01252289, 0.01272296, 0.01268383, 0.01270075,
       0.01322072, 0.01300523, 0.01318576, 0.01316996, 0.01348909,
       0.01361244, 0.01355759, 0.01317036, 0.01393919, 0.01418712,
       0.01390507, 0.01348221, 0.01346273, 0.01430731, 0.01411632,
       0.0149455 , 0.01451893, 0.01420137, 0.01430198, 0.0147613 ,
       0.01541044, 0.01530206, 0.01487369, 0.01579252, 0.01553128,
       0.01556029, 0.01562792, 0.01619532, 0.01603557, 0.01649583,
       0.01680997, 0.01700709, 0.01731175, 0.01768019, 0.01768482,
       0.01758977, 0.01793368, 0.01793466, 0.01786533, 0.01812745,
       0.01784178, 0.01897594, 0.01830717, 0.01746971, 0.01820877,
       0.01760754, 0.01762579, 0.01812669, 0.01771256, 0.0166647 ,
       0.01723771, 0.01656381, 0.01641438, 0.01705521, 0.01702114,
       0.01739327, 0.01738175, 0.0169397 , 0.01697837, 0.01699939,
       0.01746907, 0.01740899, 0.01756427, 0.01778011, 0.01805552,
       0.01792503, 0.01851733, 0.01851282, 0.01922442, 0.01959955,
       0.0194797 , 0.01902581, 0.0198519 , 0.01969015, 0.01895387,
       0.01921014, 0.01915882, 0.0193066 , 0.01975388, 0.01992714,
       0.02010699, 0.01943771, 0.01944776, 0.01870494, 0.01850502,
       0.01913071, 0.01893252, 0.01898973, 0.01989107, 0.0197415 ,
       0.01985762, 0.02007983, 0.02036921, 0.02048655, 0.02007812,
       0.01969305, 0.01909369, 0.01891607, 0.01933882, 0.01952154,
       0.01901597, 0.01957435, 0.01963661, 0.01887236, 0.01947812,
       0.01943909, 0.02039107, 0.02028172, 0.01918527, 0.01933755,
       0.01982518, 0.01925998, 0.02004136, 0.01996587, 0.01953027,
       0.01950241, 0.01941713, 0.01861895, 0.01801297, 0.01875906,
       0.01842785, 0.01859301, 0.01858576, 0.01914714, 0.01789643,
       0.0179896 , 0.01840412, 0.01834326, 0.01820536, 0.01865163,
       0.01833974, 0.01800877, 0.01874562, 0.01853523, 0.019186  ,
       0.01947174, 0.01973142, 0.01981448, 0.01965614, 0.01940607,
       0.01887162, 0.01894281, 0.01924025, 0.01915911, 0.01909703,
       0.01875021, 0.01826804, 0.0184118 , 0.01905785, 0.01872132,
       0.01830101, 0.01808001, 0.01870559, 0.01876348, 0.01789513,
       0.01817193, 0.01810833, 0.01885072, 0.01854972, 0.01862034,
       0.01804658, 0.01751888, 0.01793603, 0.01775721, 0.01679555,
       0.01673126, 0.0170145 , 0.01702215, 0.01683473, 0.01705642,
       0.01721401, 0.01707519, 0.01719304, 0.01786191, 0.01719149,
       0.01766653, 0.01735072, 0.0172864 , 0.01756898, 0.01760753,
       0.01667169, 0.01685905, 0.01692865, 0.01710117, 0.01735667,
       0.0167829 , 0.01665227, 0.01660924, 0.01694634, 0.01703535,
       0.01743413, 0.01802328, 0.01766431, 0.01819384, 0.01795129,
       0.01738098, 0.01706162, 0.01768   , 0.01840108, 0.01778863,
       0.0174854 , 0.01744426, 0.01669113, 0.01683445, 0.017601  ,
       0.01801686, 0.0179503 , 0.01785821, 0.01767313, 0.01812542,
       0.01777487, 0.01790189, 0.01834988, 0.01777839, 0.01748666,
       0.01821621, 0.01919577, 0.01863223, 0.01910249, 0.01905034,
       0.01923658, 0.01912095, 0.01956433, 0.01955526, 0.01911067,
       0.01885358, 0.01863384, 0.01796191, 0.01876395, 0.0180403 ,
       0.01851047, 0.01861489, 0.01850299, 0.01908005, 0.01826712,
       0.01747564, 0.0172119 , 0.01717058, 0.01776285, 0.01652717,
       0.01531783, 0.01573188, 0.0163743 , 0.01594052, 0.01610665,
       0.01631898, 0.01638887, 0.01631926, 0.01698346, 0.01607149,
       0.01682299, 0.01662847, 0.01588945, 0.01620747, 0.01709203,
       0.01710271, 0.01689329, 0.01705577, 0.01732199, 0.01727387,
       0.01757813, 0.01749919, 0.01793905, 0.01831212, 0.01758471,
       0.01802558, 0.01849691, 0.01854671, 0.0184043 , 0.01831609,
       0.01839312, 0.01766565, 0.01770568, 0.01791415, 0.01780005,
       0.0178066 , 0.01788201, 0.01789011, 0.01742496, 0.01769915,
       0.01762261, 0.01750329, 0.01810797, 0.01866469, 0.01890543,
       0.01904251, 0.0184392 , 0.01875737, 0.01853415, 0.01794761,
       0.01841667, 0.01834719, 0.01856901, 0.01812069, 0.01814027,
       0.01798246, 0.01834466, 0.01754884, 0.01797296, 0.01731662,
       0.01771647, 0.01773723, 0.01775244, 0.01798031, 0.01738315,
       0.01778203, 0.0181015 , 0.01767102, 0.01738304, 0.01722243,
       0.01721939, 0.01664162, 0.01661274, 0.01691132, 0.01721032,
       0.01698547, 0.01624649, 0.01641172, 0.01650558, 0.01643167,
       0.01688889, 0.01637382, 0.01660605, 0.01683745, 0.01631869,
       0.01556955, 0.01570715, 0.01566366, 0.01582789, 0.01629464,
       0.01653749, 0.01694706, 0.01687894, 0.01672533, 0.01695571,
       0.01723807, 0.01762621, 0.01796685, 0.0175404 , 0.01754734,
       0.01748036, 0.01742727, 0.01720463, 0.01755446, 0.01804286]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.03208255856795993  last value of R 0.02251271207035574
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.06
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.82
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.64
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.40
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.07
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.93
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.44
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.54
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.59
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.43
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.68
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.52
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.55
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-1.75
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.23
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.12
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.78
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.67
Realization 5, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.62
working on realization 5 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-2.485033691589947, 1.0947149910753113, 0.5458350281440492, 2.002550226799543, 1.3648467838645653, 2.051905790014975, 0.4759992275529985, -1.3732148228793348, 3.0107716761896306, 0.0316894940324608, 2.8620626120644985, -2.9253417835967466, 2.794201754167056, -3.0197328777402976, -2.8930572710928595, 0.5667097292514232, -1.0097457476009293, -0.10213475657436044, 0.15904143706457896, 0.9209255052965224], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34063a10>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8898., 8897., 8896., ..., 8899., 8900., 8899.],
       [8898., 8897., 8896., ..., 8899., 8900., 8899.],
       [8898., 8897., 8896., ..., 8899., 8900., 8899.]]), 'phi': array([[5.38465893e-01, 4.18876659e+00, 3.44532029e+00, ...,
        2.97742535e+00, 3.22302349e+00, 4.15436534e+00],
       [5.86090678e-01, 4.23583397e+00, 3.49554136e+00, ...,
        3.02939336e+00, 3.27383449e+00, 4.21060950e+00],
       [6.37186882e-01, 4.28754305e+00, 3.54614015e+00, ...,
        3.07658091e+00, 3.32666577e+00, 4.25960766e+00],
       ...,
       [2.80193110e+04, 2.80192646e+04, 2.80158661e+04, ...,
        2.80248470e+04, 2.80282941e+04, 2.80282472e+04],
       [2.80193561e+04, 2.80193109e+04, 2.80159163e+04, ...,
        2.80248955e+04, 2.80283385e+04, 2.80282963e+04],
       [2.80194038e+04, 2.80193569e+04, 2.80159620e+04, ...,
        2.80249514e+04, 2.80283921e+04, 2.80283428e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.17308139, 0.17393964, 0.17380272, ..., 0.0226262 , 0.02203961,
       0.02251271]), 'R': array([0.04347522, 0.04305206, 0.04314326, 0.04315418, 0.04335529,
       0.04378263, 0.04393059, 0.0437289 , 0.04348767, 0.04383079,
       0.04419152, 0.04424892, 0.04446599, 0.04400538, 0.044836  ,
       0.04472915, 0.04457183, 0.04514684, 0.04515544, 0.0445632 ,
       0.04418059, 0.04369492, 0.04311081, 0.04289005, 0.04223896,
       0.04232446, 0.04230316, 0.04202346, 0.04250362, 0.04217127,
       0.04253646, 0.04240717, 0.04175798, 0.04090808, 0.04061995,
       0.04091553, 0.04033136, 0.04029563, 0.04040349, 0.0407617 ,
       0.04027087, 0.03989704, 0.03930234, 0.039435  , 0.03912472,
       0.03869742, 0.03888308, 0.03897836, 0.0391106 , 0.03853748,
       0.03857363, 0.038429  , 0.03862672, 0.03855977, 0.03820672,
       0.03840313, 0.03861313, 0.03871338, 0.0391983 , 0.03886141,
       0.03909129, 0.03844495, 0.03879614, 0.03897918, 0.03846508,
       0.03865756, 0.03811004, 0.03794661, 0.03768393, 0.03785208,
       0.03823518, 0.03863125, 0.03910565, 0.03899622, 0.03833182,
       0.03851952, 0.03777183, 0.03810818, 0.03790665, 0.03803062,
       0.03722446, 0.03809367, 0.03864082, 0.03816637, 0.03769087,
       0.0369231 , 0.03681637, 0.0369724 , 0.03697997, 0.03695049,
       0.0371204 , 0.03726659, 0.03721269, 0.03696139, 0.03668776,
       0.03639262, 0.03750057, 0.03675716, 0.03616195, 0.036001  ,
       0.03613079, 0.036347  , 0.03558965, 0.03519326, 0.03488667,
       0.03465016, 0.03423977, 0.03438448, 0.03351325, 0.0327945 ,
       0.03301099, 0.03307395, 0.03253231, 0.03281739, 0.03288899,
       0.03227266, 0.03189365, 0.03205918, 0.03229807, 0.03183212,
       0.03174532, 0.03161305, 0.03191754, 0.03201484, 0.03139948,
       0.03152299, 0.03114718, 0.03148849, 0.03148315, 0.0319957 ,
       0.03229063, 0.03238272, 0.03253049, 0.0330912 , 0.03312353,
       0.03310732, 0.03339697, 0.03303588, 0.03310215, 0.03285604,
       0.03362379, 0.03402986, 0.03402148, 0.03411649, 0.03448898,
       0.03467115, 0.03501559, 0.03550122, 0.03520997, 0.03515284,
       0.03483589, 0.03508243, 0.03472911, 0.03482684, 0.03457042,
       0.03454138, 0.03484919, 0.03400285, 0.03407918, 0.0335781 ,
       0.03371571, 0.03363902, 0.03381808, 0.03385928, 0.03285549,
       0.03238231, 0.03272767, 0.03207809, 0.03168332, 0.03156717,
       0.03119607, 0.03106779, 0.03156008, 0.03158045, 0.03113579,
       0.0314451 , 0.03168603, 0.03082864, 0.02985322, 0.02987747,
       0.0299493 , 0.02961669, 0.03016765, 0.02956   , 0.03015841,
       0.03000492, 0.02985445, 0.03044053, 0.03020504, 0.03038962,
       0.03010493, 0.03040231, 0.03061519, 0.03028253, 0.03058337,
       0.03090268, 0.03088283, 0.03107224, 0.03092217, 0.03108359,
       0.03170806, 0.03225031, 0.03206775, 0.03274604, 0.03345851,
       0.03290689, 0.03286141, 0.03261611, 0.03257622, 0.03313541,
       0.03308832, 0.03347011, 0.03341336, 0.03313562, 0.03314073,
       0.03284966, 0.03245539, 0.03199748, 0.03155324, 0.03061768,
       0.03025384, 0.03028212, 0.03015997, 0.02993265, 0.02934656,
       0.02885825, 0.02819424, 0.028312  , 0.02756138, 0.02680827,
       0.02670209, 0.02607825, 0.02570517, 0.02582112, 0.02589619,
       0.02585421, 0.02542429, 0.02584486, 0.02520983, 0.02560531,
       0.02568835, 0.02529688, 0.02553224, 0.02554204, 0.0260553 ,
       0.02597264, 0.02667745, 0.02672815, 0.0270654 , 0.02679775,
       0.02696338, 0.02695085, 0.02726693, 0.02784491, 0.02811427,
       0.02845666, 0.02886484, 0.02969113, 0.02940977, 0.02980284,
       0.02931318, 0.0289438 , 0.02925439, 0.0302032 , 0.03015649,
       0.0303769 , 0.03013908, 0.03058452, 0.03027578, 0.03031758,
       0.03042146, 0.03020426, 0.03017214, 0.02952041, 0.02965382,
       0.02979178, 0.02992154, 0.02970016, 0.02985478, 0.02956263,
       0.02986314, 0.02927806, 0.0295042 , 0.02959385, 0.02938251,
       0.02964048, 0.02986201, 0.02961551, 0.02925024, 0.02798423,
       0.02751804, 0.02685982, 0.0265701 , 0.02684968, 0.02694412,
       0.02626028, 0.02650689, 0.0259192 , 0.02577011, 0.02557156,
       0.02508687, 0.02515797, 0.02531438, 0.02466449, 0.02468195,
       0.02446495, 0.02416345, 0.02411551, 0.02442944, 0.02495118,
       0.02413161, 0.02425782, 0.02481274, 0.02448565, 0.02448236,
       0.02508166, 0.02474698, 0.02448506, 0.02502573, 0.02490107,
       0.02482597, 0.02500583, 0.02523734, 0.025344  , 0.02573294,
       0.02592055, 0.02709046, 0.02747455, 0.0275317 , 0.02702407,
       0.02711189, 0.02658599, 0.02697208, 0.02703196, 0.02621547,
       0.02592602, 0.02587338, 0.02605723, 0.02619723, 0.02658762,
       0.02661612, 0.02675898, 0.0261931 , 0.02662662, 0.02680832,
       0.0263241 , 0.02607911, 0.02516262, 0.02549699, 0.02555979,
       0.0257648 , 0.02494908, 0.02477861, 0.02440326, 0.02460163,
       0.02396815, 0.0232052 , 0.02314145, 0.02419751, 0.02354935,
       0.02322504, 0.02276227, 0.02280904, 0.02318066, 0.02352573,
       0.022207  , 0.02275383, 0.0233438 , 0.02408722, 0.02302233,
       0.02273843, 0.02284553, 0.0226262 , 0.02203961, 0.02251271]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.041123496341474386  last value of R 0.0426343935403142
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.16
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.73
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.65
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.13
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.06
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.83
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.50
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.53
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.68
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.42
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.71
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.61
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.53
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-1.80
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.22
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.13
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.74
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.65
Realization 6, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.60
min_std: 0.000190095039843087
Realization 6, order_param_std_threshold to 0.00065, for {min_std, max_std} = {0.0002,0.0063} 
working on realization 6 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-0.7683077480868201, -1.2149434713951972, -2.957834154993298, 0.387496930405681, 2.0700423834025514, 2.633233796610466, -0.4958776102893414, -1.2359240669258824, 1.1223722869775692, 1.873187279959974, 2.7798602957195984, -1.4236772643713125, 2.559570918688217, 1.5646025962499586, 2.7003271803100874, 2.0268732231199076, 1.4101540532713086, 0.5532099630986802, 1.944144475943479, -0.3721312916052564], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34027610>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8893., 8893., 8893., ..., 8910., 8905., 8904.],
       [8893., 8893., 8893., ..., 8910., 8905., 8904.],
       [8893., 8893., 8893., ..., 8910., 8905., 8904.]]), 'phi': array([[2.16594958e+00, 1.72806325e+00, 0.00000000e+00, ...,
        3.44558145e+00, 4.83448867e+00, 2.45488678e+00],
       [2.22066329e+00, 1.78068769e+00, 5.38511338e-02, ...,
        3.49645622e+00, 4.88538909e+00, 2.50556634e+00],
       [2.27360359e+00, 1.83350183e+00, 1.02737532e-01, ...,
        3.54801454e+00, 4.93819806e+00, 2.55554488e+00],
       ...,
       [2.80060241e+04, 2.80058207e+04, 2.80024040e+04, ...,
        2.80617548e+04, 2.80463338e+04, 2.80399802e+04],
       [2.80060685e+04, 2.80058707e+04, 2.80024526e+04, ...,
        2.80618055e+04, 2.80463857e+04, 2.80400268e+04],
       [2.80061213e+04, 2.80059247e+04, 2.80025075e+04, ...,
        2.80618591e+04, 2.80464368e+04, 2.80400829e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.23152697, 0.23195108, 0.23216643, ..., 0.04329663, 0.04323575,
       0.04263439]), 'R': array([0.04157693, 0.04231965, 0.04242872, 0.04237893, 0.04193495,
       0.04203646, 0.04165703, 0.0410626 , 0.04132384, 0.04164896,
       0.04075634, 0.0407256 , 0.04102692, 0.0408802 , 0.04033716,
       0.04089731, 0.04081843, 0.04149589, 0.04132288, 0.04104741,
       0.04169027, 0.04148579, 0.04163853, 0.04174545, 0.04114242,
       0.04234295, 0.04174964, 0.04185705, 0.04183166, 0.04123262,
       0.04139704, 0.0418823 , 0.04226397, 0.04200158, 0.04253104,
       0.04248041, 0.04284433, 0.04438235, 0.04437749, 0.04437261,
       0.04440619, 0.04349425, 0.04380063, 0.04365099, 0.04357231,
       0.04324453, 0.04309295, 0.04291307, 0.04305252, 0.04306366,
       0.04296426, 0.04318524, 0.04314923, 0.04303945, 0.04184717,
       0.04096148, 0.04125595, 0.04062351, 0.03896684, 0.03866486,
       0.03890081, 0.03830135, 0.03765992, 0.03741867, 0.03698362,
       0.03704261, 0.03674202, 0.03704848, 0.03705925, 0.03699747,
       0.03643945, 0.03656775, 0.0366091 , 0.03720333, 0.03734428,
       0.03713083, 0.03632906, 0.03679879, 0.03702363, 0.03696264,
       0.03699007, 0.03744164, 0.03834636, 0.03831722, 0.03794764,
       0.03845834, 0.03888291, 0.03890985, 0.03845573, 0.03878655,
       0.03906682, 0.03923449, 0.03886092, 0.03795071, 0.03825401,
       0.03829123, 0.03900948, 0.03877653, 0.0401213 , 0.03955662,
       0.0395149 , 0.03961122, 0.04044373, 0.04035351, 0.04026824,
       0.04064062, 0.04095157, 0.04092297, 0.041031  , 0.04137086,
       0.04075882, 0.04137883, 0.04133652, 0.04210913, 0.04206433,
       0.04270384, 0.04288405, 0.04226316, 0.04226681, 0.04211297,
       0.04213772, 0.04267666, 0.04283855, 0.04316058, 0.04224073,
       0.04259722, 0.04202709, 0.04217333, 0.0419174 , 0.04229759,
       0.04266192, 0.04200275, 0.04232669, 0.04222286, 0.04278469,
       0.04302439, 0.04236154, 0.04224857, 0.04256272, 0.04350239,
       0.04382809, 0.04362007, 0.04468605, 0.04474515, 0.04507808,
       0.04554513, 0.04561511, 0.04620235, 0.04620556, 0.04558735,
       0.04564195, 0.04593986, 0.04651367, 0.04682883, 0.04671686,
       0.04653981, 0.04619907, 0.04606748, 0.04635881, 0.04699558,
       0.04748612, 0.04749444, 0.04713596, 0.04816443, 0.04830993,
       0.04787478, 0.04761746, 0.04634076, 0.04599655, 0.04665034,
       0.04695444, 0.04656785, 0.04670751, 0.0470316 , 0.04645691,
       0.04604411, 0.04603739, 0.04591328, 0.04558098, 0.04533778,
       0.04485477, 0.04456162, 0.04451788, 0.04470084, 0.04399711,
       0.04316562, 0.04350779, 0.04289658, 0.04237358, 0.04255984,
       0.04222668, 0.04203023, 0.04089719, 0.04066156, 0.04057167,
       0.04001047, 0.04031765, 0.04012515, 0.03971946, 0.03912586,
       0.03848528, 0.03818097, 0.03802738, 0.0378077 , 0.03703834,
       0.03685965, 0.03714055, 0.03714652, 0.03735986, 0.03711472,
       0.03726626, 0.03798578, 0.03742466, 0.0377709 , 0.03820174,
       0.03792813, 0.03816107, 0.03779132, 0.03792758, 0.0377191 ,
       0.03763124, 0.03786443, 0.03700461, 0.0363509 , 0.03678397,
       0.03699527, 0.03731855, 0.03754114, 0.03794575, 0.03738449,
       0.03708022, 0.03613391, 0.03655859, 0.03730935, 0.03720022,
       0.03692943, 0.03723445, 0.03718684, 0.03746005, 0.03737235,
       0.03732395, 0.03819247, 0.03843527, 0.03876149, 0.03908614,
       0.03961339, 0.04011473, 0.03972643, 0.04058206, 0.04004327,
       0.03956498, 0.03905672, 0.03947428, 0.03915947, 0.03907081,
       0.03909468, 0.03902883, 0.03927939, 0.03877528, 0.03910082,
       0.03911675, 0.03905011, 0.03919566, 0.03825131, 0.03711804,
       0.03757517, 0.03766867, 0.03819247, 0.0386974 , 0.03756713,
       0.03831033, 0.03757566, 0.03817392, 0.03844924, 0.03857241,
       0.0393842 , 0.03962985, 0.04037243, 0.04038166, 0.04115604,
       0.04138414, 0.04196121, 0.04180087, 0.04153902, 0.04211909,
       0.04292419, 0.0434827 , 0.04339543, 0.04359716, 0.04349327,
       0.04287162, 0.04332811, 0.04387819, 0.04335414, 0.04297634,
       0.04297636, 0.04317088, 0.04351895, 0.04324507, 0.04338129,
       0.04291682, 0.04266467, 0.04279108, 0.04272957, 0.04256699,
       0.04168354, 0.04196766, 0.04158991, 0.04101719, 0.04104373,
       0.04113142, 0.04054413, 0.04046016, 0.04031916, 0.04051848,
       0.03983748, 0.04031641, 0.03981561, 0.03971697, 0.03911974,
       0.03985933, 0.0407853 , 0.040352  , 0.03996844, 0.04037103,
       0.04037439, 0.03993237, 0.03979114, 0.03969735, 0.04024765,
       0.04080341, 0.04009605, 0.0396891 , 0.03957047, 0.03916017,
       0.03872683, 0.03935236, 0.03997472, 0.04003802, 0.03957556,
       0.03980046, 0.03989159, 0.04047122, 0.04105289, 0.04150795,
       0.04119964, 0.04109414, 0.04120754, 0.04084681, 0.04063117,
       0.04068669, 0.04085982, 0.04085326, 0.04143896, 0.04182378,
       0.04240536, 0.04248347, 0.04292687, 0.04326843, 0.04308976,
       0.04347629, 0.04437222, 0.04393715, 0.04409849, 0.04425454,
       0.04395413, 0.04438505, 0.04395683, 0.04367682, 0.04330425,
       0.04318172, 0.04365872, 0.04329663, 0.04323575, 0.04263439]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.019217246380696204  last value of R 0.0197202162996098
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.08
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.92
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.40
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.44
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.81
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.09
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.14
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.94
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.22
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.87
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.16
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-2.03
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=0.94
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.38
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.46
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.91
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=-0.09
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.76
Realization 7, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.78
min_std: 0.0001541355725282664
Realization 7, order_param_std_threshold to 0.00032, for {min_std, max_std} = {0.0002,0.0024} 
working on realization 7 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [1.1019610100216708, -2.1071018309424043, -1.7602538194010309, -1.8514017041670159, 0.9251064655786951, -2.1415436361874125, -2.0100406458451268, -0.37663129444537, -2.8143951784719796, -0.5503245095008458, -0.5386551512588365, 2.916312139735865, -0.9123048952991759, 1.9163818880423724, -0.3359950356288257, -1.9301056627947666, 0.7536874984723343, 1.7825853467314046, -0.25414091452118504, -1.7536644929633567], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34016710>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8893., 8894., 8893., ..., 8893., 8893., 8895.],
       [8893., 8894., 8893., ..., 8893., 8893., 8895.],
       [8893., 8894., 8893., ..., 8893., 8893., 8895.]]), 'phi': array([[4.26829869e+00, 7.62626123e-01, 1.08905985e+00, ...,
        4.78029348e+00, 2.77900190e+00, 9.72391570e-01],
       [4.31898486e+00, 8.10187079e-01, 1.13792567e+00, ...,
        4.83161410e+00, 2.82666588e+00, 1.02337272e+00],
       [4.37365540e+00, 8.59931434e-01, 1.19206996e+00, ...,
        4.88588109e+00, 2.87203740e+00, 1.07403653e+00],
       ...,
       [2.80080314e+04, 2.80081168e+04, 2.80046554e+04, ...,
        2.80081422e+04, 2.80053031e+04, 2.80115545e+04],
       [2.80080858e+04, 2.80081691e+04, 2.80047068e+04, ...,
        2.80081961e+04, 2.80053526e+04, 2.80116036e+04],
       [2.80081370e+04, 2.80082211e+04, 2.80047585e+04, ...,
        2.80082509e+04, 2.80054027e+04, 2.80116549e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.26469887, 0.26482386, 0.26506414, ..., 0.02030545, 0.01994897,
       0.01972022]), 'R': array([0.00774056, 0.00787867, 0.00830522, 0.00866997, 0.00932162,
       0.0093852 , 0.0088902 , 0.00910958, 0.00942473, 0.00908632,
       0.00851844, 0.00866772, 0.00860579, 0.00895076, 0.00915183,
       0.00955074, 0.00977835, 0.0102058 , 0.00989242, 0.0105859 ,
       0.01049702, 0.01059106, 0.01073347, 0.01097332, 0.01081302,
       0.01097097, 0.01080442, 0.01072632, 0.011283  , 0.01134984,
       0.01171312, 0.01225533, 0.01235446, 0.01192455, 0.01195968,
       0.01158401, 0.01150041, 0.01200553, 0.01202175, 0.01240271,
       0.01262388, 0.01333745, 0.01305474, 0.01311215, 0.01310679,
       0.01314476, 0.01342814, 0.01411473, 0.0144429 , 0.01463341,
       0.01422389, 0.01420253, 0.01387428, 0.01372812, 0.01422109,
       0.01433375, 0.01417801, 0.01387851, 0.01399837, 0.01363354,
       0.01426329, 0.01458313, 0.01484189, 0.01481177, 0.0152628 ,
       0.01479194, 0.01474091, 0.01524056, 0.01530816, 0.01555341,
       0.01516733, 0.01488524, 0.01455301, 0.01472672, 0.01490775,
       0.0153282 , 0.01605457, 0.01587112, 0.0152513 , 0.01563692,
       0.01532359, 0.01489119, 0.01502399, 0.01493425, 0.01553537,
       0.01585464, 0.01643567, 0.01640516, 0.01671469, 0.01717702,
       0.01719852, 0.01728074, 0.01685689, 0.0174722 , 0.01743773,
       0.01732801, 0.01736801, 0.01779438, 0.01826071, 0.01833319,
       0.01833111, 0.01834379, 0.01813516, 0.018302  , 0.01849626,
       0.0188909 , 0.01982063, 0.01988694, 0.01981293, 0.02015148,
       0.02053615, 0.02101277, 0.02106218, 0.02061719, 0.020677  ,
       0.02004591, 0.02003637, 0.02021627, 0.02008791, 0.02041052,
       0.02051574, 0.02019303, 0.02054227, 0.01991765, 0.01973476,
       0.01962566, 0.01988314, 0.01997317, 0.01991864, 0.01984825,
       0.01994527, 0.01983152, 0.01964965, 0.01992654, 0.02021836,
       0.02060763, 0.02048184, 0.02087814, 0.02100768, 0.02088699,
       0.02081517, 0.02021771, 0.02049929, 0.02061276, 0.02063456,
       0.02049756, 0.02052428, 0.0200173 , 0.01972768, 0.0194858 ,
       0.01944094, 0.01946661, 0.0195609 , 0.02001072, 0.0195078 ,
       0.01943969, 0.01973498, 0.02004189, 0.02002846, 0.01986137,
       0.02033392, 0.02036976, 0.02081337, 0.02087796, 0.02100578,
       0.02100984, 0.02101016, 0.02101529, 0.02145448, 0.02144563,
       0.02119714, 0.02102594, 0.02122789, 0.02170343, 0.02180174,
       0.02194485, 0.02188713, 0.02192853, 0.022674  , 0.02286549,
       0.02276572, 0.02351508, 0.02336031, 0.02377552, 0.0238988 ,
       0.02336911, 0.02383732, 0.02366969, 0.02384901, 0.02369574,
       0.02445107, 0.02398156, 0.02375762, 0.02355496, 0.02364839,
       0.02381118, 0.02367246, 0.02393133, 0.02349752, 0.02378941,
       0.02360963, 0.02397669, 0.0243631 , 0.02454183, 0.02476056,
       0.02469656, 0.02477814, 0.02436207, 0.02470599, 0.02493842,
       0.02471961, 0.024585  , 0.02466477, 0.02448428, 0.02388275,
       0.02349232, 0.02280574, 0.02261765, 0.02249092, 0.02206842,
       0.02206675, 0.02235036, 0.02212245, 0.02280178, 0.02268155,
       0.02249478, 0.02262068, 0.022281  , 0.02276889, 0.02271255,
       0.02300113, 0.02284005, 0.02277726, 0.02299986, 0.02293235,
       0.02256474, 0.0229107 , 0.02242277, 0.02233862, 0.02276123,
       0.02275036, 0.02345561, 0.02343098, 0.02361599, 0.02323125,
       0.02368002, 0.02373954, 0.02349242, 0.02339338, 0.02326758,
       0.02361564, 0.02344264, 0.02348054, 0.02302378, 0.02290509,
       0.0224593 , 0.02288647, 0.02255522, 0.02280497, 0.02286991,
       0.02214207, 0.02170817, 0.02119245, 0.02102367, 0.02030134,
       0.02066867, 0.02029905, 0.02063766, 0.02023153, 0.02009581,
       0.01979652, 0.01935914, 0.0194655 , 0.01983982, 0.01988386,
       0.01984482, 0.01966223, 0.01973125, 0.01993461, 0.01960008,
       0.01908533, 0.01919173, 0.01974382, 0.02025266, 0.02019252,
       0.02074186, 0.02116172, 0.02125392, 0.021535  , 0.02194432,
       0.02267043, 0.02233853, 0.02226247, 0.02309825, 0.02249783,
       0.02282801, 0.02285777, 0.02252199, 0.02255254, 0.02262516,
       0.02260046, 0.02220022, 0.02207098, 0.02221828, 0.0225125 ,
       0.02228369, 0.02167252, 0.0214478 , 0.02162995, 0.02143391,
       0.02107312, 0.02131002, 0.02139047, 0.02167001, 0.02130686,
       0.02077652, 0.02098114, 0.02108406, 0.02095333, 0.0211086 ,
       0.02112426, 0.02131256, 0.02117637, 0.02092141, 0.02082527,
       0.02086747, 0.02025904, 0.02035821, 0.02021143, 0.01972855,
       0.01985022, 0.0197139 , 0.01989129, 0.02002731, 0.0198926 ,
       0.02016797, 0.01970206, 0.01968118, 0.019515  , 0.01962489,
       0.01958555, 0.01973827, 0.01992613, 0.02003345, 0.02008954,
       0.01995285, 0.01979036, 0.02033119, 0.02010449, 0.01968004,
       0.0198658 , 0.01966115, 0.01986134, 0.01994737, 0.02044423,
       0.02064473, 0.02102325, 0.02119874, 0.02165569, 0.0212372 ,
       0.02134472, 0.02106006, 0.02088872, 0.02088408, 0.02051413,
       0.02056817, 0.02108092, 0.02110744, 0.02081532, 0.02084422,
       0.0207427 , 0.02055701, 0.02030545, 0.01994897, 0.01972022]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.02576299963750529  last value of R 0.023731191638983833
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.16
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.74
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.75
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.21
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.13
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.73
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.56
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.47
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.67
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.41
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.69
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.55
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.57
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-1.75
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.24
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.12
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.74
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.71
Realization 8, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.75
working on realization 8 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [2.901972415742045, 1.0327248147614272, 0.24919778196692954, 0.17889156174817344, -0.7121783960151258, 1.1682969230657179, -2.5495201228560553, -1.518873054978108, -3.132660005025664, 0.8574212556938567, 2.5206980240902563, -2.0977231356027266, 0.013175809641914338, 0.14506299810043854, 0.13387899271617165, -0.23513060014973908, -2.3477002517077006, 1.6061079862569585, -0.56032005909882, 2.22840113556705], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34037510>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8894., 8893., ..., 8892., 8894., 8895.],
       [8894., 8894., 8893., ..., 8892., 8894., 8895.],
       [8894., 8894., 8893., ..., 8892., 8894., 8895.]]), 'phi': array([[6.05862109e+00, 4.14818642e+00, 3.33653285e+00, ...,
        4.74725916e+00, 2.67991136e+00, 5.30460627e+00],
       [6.10892294e+00, 4.20066380e+00, 3.38824180e+00, ...,
        4.79751744e+00, 2.73156138e+00, 5.35190592e+00],
       [6.16042468e+00, 4.25378843e+00, 3.43790590e+00, ...,
        4.84666829e+00, 2.78653531e+00, 5.40220377e+00],
       ...,
       [2.80116392e+04, 2.80115259e+04, 2.80081107e+04, ...,
        2.80046407e+04, 2.80081052e+04, 2.80144044e+04],
       [2.80116909e+04, 2.80115841e+04, 2.80081597e+04, ...,
        2.80046909e+04, 2.80081610e+04, 2.80144588e+04],
       [2.80117398e+04, 2.80116391e+04, 2.80082181e+04, ...,
        2.80047426e+04, 2.80082093e+04, 2.80145066e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.20299519, 0.20339637, 0.20291003, ..., 0.02366169, 0.02372265,
       0.02373119]), 'R': array([0.02754383, 0.02757214, 0.02757934, 0.02750378, 0.02718212,
       0.02708518, 0.02709564, 0.02696314, 0.02641388, 0.02618198,
       0.02623764, 0.02527619, 0.02540435, 0.02602047, 0.02587131,
       0.02613602, 0.02643872, 0.02688281, 0.02655425, 0.02758504,
       0.02822412, 0.02874481, 0.02870298, 0.02873759, 0.02834414,
       0.02863582, 0.02879566, 0.0282667 , 0.02767489, 0.02821441,
       0.02817935, 0.02779757, 0.02829159, 0.02843254, 0.02882941,
       0.02863342, 0.02910445, 0.02908878, 0.02914068, 0.02952277,
       0.02907793, 0.02925154, 0.02995059, 0.02956939, 0.02978276,
       0.02927764, 0.02971968, 0.02923573, 0.02951035, 0.02930857,
       0.02915775, 0.02908073, 0.02898988, 0.02910063, 0.02855046,
       0.0282337 , 0.02878578, 0.02768956, 0.02718333, 0.02682887,
       0.02674057, 0.02710974, 0.02689486, 0.02566806, 0.02515821,
       0.025543  , 0.02494681, 0.02499253, 0.02498344, 0.02485121,
       0.02475979, 0.02534841, 0.02585312, 0.02587701, 0.02546743,
       0.02569218, 0.02522632, 0.0254645 , 0.02501718, 0.02533037,
       0.02585698, 0.02621548, 0.0272133 , 0.02725078, 0.02741874,
       0.02732258, 0.02738331, 0.02799296, 0.02794706, 0.028267  ,
       0.02775677, 0.02745444, 0.02750277, 0.02803358, 0.02795179,
       0.02798873, 0.02796814, 0.02822524, 0.02822175, 0.02942559,
       0.02974927, 0.03052733, 0.03117408, 0.03040184, 0.03011185,
       0.03013806, 0.03010678, 0.03046692, 0.03063843, 0.03085883,
       0.02986226, 0.03064817, 0.0304963 , 0.03150961, 0.03094008,
       0.03091989, 0.03015615, 0.03021303, 0.02988284, 0.03007592,
       0.02958538, 0.02939369, 0.03013925, 0.02998774, 0.03010682,
       0.03092912, 0.03039414, 0.02988045, 0.02925312, 0.02846601,
       0.02741946, 0.02789809, 0.02765274, 0.02766462, 0.02786837,
       0.02790993, 0.02810126, 0.02771698, 0.02810224, 0.0283845 ,
       0.02762692, 0.02774444, 0.02818535, 0.02802228, 0.02783867,
       0.0274988 , 0.0270943 , 0.02727315, 0.02757965, 0.02750344,
       0.02773738, 0.02761198, 0.02748364, 0.02745601, 0.02823363,
       0.02756818, 0.02683763, 0.02650679, 0.02661856, 0.02670105,
       0.02691564, 0.02689139, 0.02738568, 0.02742207, 0.02719362,
       0.02687159, 0.02723597, 0.0273208 , 0.02741085, 0.02724749,
       0.0272394 , 0.02707875, 0.02719282, 0.02692585, 0.02687104,
       0.02672766, 0.02729563, 0.02653283, 0.02681469, 0.02685562,
       0.02676983, 0.02677774, 0.02733479, 0.02650229, 0.0261384 ,
       0.02549266, 0.02525389, 0.02564673, 0.02565366, 0.0257993 ,
       0.02541017, 0.02496584, 0.02520382, 0.02533475, 0.02544413,
       0.0249274 , 0.02517439, 0.02448579, 0.02508027, 0.02502905,
       0.02433368, 0.02458114, 0.02443059, 0.02406678, 0.02439593,
       0.02403826, 0.02431147, 0.02415168, 0.02402431, 0.02418037,
       0.02374839, 0.02368477, 0.02398494, 0.02467606, 0.02480258,
       0.02555438, 0.0255327 , 0.02661534, 0.02699125, 0.02696081,
       0.02686572, 0.02659199, 0.02710079, 0.02690069, 0.02675822,
       0.02654982, 0.02641324, 0.02680667, 0.02685393, 0.02745649,
       0.02797453, 0.02842054, 0.02868397, 0.02824584, 0.02892126,
       0.02878996, 0.02904324, 0.02805126, 0.02859108, 0.02856513,
       0.02797826, 0.02719892, 0.0275439 , 0.02779759, 0.02757826,
       0.02726889, 0.0267726 , 0.0263291 , 0.02520107, 0.02533048,
       0.02535309, 0.02524749, 0.02537377, 0.02510079, 0.0248373 ,
       0.02476191, 0.02494461, 0.02432684, 0.02378744, 0.02464006,
       0.02432378, 0.02436169, 0.02454436, 0.02418684, 0.02444534,
       0.02404263, 0.02413378, 0.02433205, 0.02505328, 0.02458489,
       0.02448649, 0.02400862, 0.02351482, 0.02394466, 0.02397124,
       0.0234534 , 0.02331287, 0.02340178, 0.02311376, 0.02215118,
       0.02245683, 0.02231518, 0.02315264, 0.0226995 , 0.02248437,
       0.02197014, 0.02193772, 0.02318709, 0.02241859, 0.02253585,
       0.02224921, 0.02211329, 0.02192345, 0.02171948, 0.02126698,
       0.0216542 , 0.02193275, 0.02220522, 0.02200712, 0.02221522,
       0.02290045, 0.02315251, 0.02335556, 0.02366225, 0.02374996,
       0.02272145, 0.02293537, 0.02321179, 0.02304054, 0.02269077,
       0.02282897, 0.02256497, 0.02281108, 0.02252773, 0.02252419,
       0.02253813, 0.02255551, 0.02150059, 0.02206493, 0.02205753,
       0.02196703, 0.02156023, 0.02113566, 0.0208847 , 0.02209736,
       0.02173903, 0.0220026 , 0.02180453, 0.02151393, 0.02118656,
       0.02068048, 0.02057797, 0.01975443, 0.01996727, 0.01964689,
       0.0194059 , 0.01854881, 0.01890326, 0.01918204, 0.01912901,
       0.01884193, 0.01870476, 0.01879759, 0.01846485, 0.01871952,
       0.01893871, 0.01945359, 0.01950019, 0.0198368 , 0.0202431 ,
       0.0213639 , 0.02220278, 0.02250801, 0.02222079, 0.0222702 ,
       0.02189191, 0.02217003, 0.02283373, 0.02246711, 0.02286111,
       0.02314361, 0.02290264, 0.02303123, 0.02296652, 0.02349412,
       0.02351066, 0.02366691, 0.02383627, 0.02407066, 0.02408807,
       0.02397402, 0.0239138 , 0.02366169, 0.02372265, 0.02373119]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.006308542281287333  last value of R 0.010513875690193866
Order parameter predicted for solution=0.00 has been reached. Averaged over last 1 periods of the intrinsic frequency for realization 9.
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.00
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.87
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.57
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.33
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.00
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.96
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.30
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.81
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.32
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.83
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.29
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.85
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.03
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.20
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.75
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.68
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.26
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=3.10
Realization 9, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=3.10
min_std: 0.00013840846641053034
Realization 9, order_param_std_threshold to 0.00037, for {min_std, max_std} = {0.0001,0.0032} 
working on realization 9 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-1.9840865638057992, 2.7549835059893955, -2.732333343265258, -0.9246898969622803, 1.096145220090495, 1.0431783800950676, 0.05777229141034157, 1.6887625211924684, 1.6921461509643123, -1.4461571633180188, -1.418444765840127, 1.4358496291509812, -1.3008714949987885, -2.24490121136864, 2.0860318253051027, 1.2385468300755287, 0.4665828409409727, 2.6432504709291127, 2.9858390654895626, -0.6235859913981914], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34074910>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8895., 8895., 8894., ..., 8893., 8894., 8895.],
       [8895., 8895., 8894., ..., 8893., 8894., 8895.],
       [8895., 8895., 8894., ..., 8893., 8894., 8895.]]), 'phi': array([[8.00479894e-01, 5.48083453e+00, 0.00000000e+00, ...,
        5.60118499e+00, 5.99119295e+00, 2.29374455e+00],
       [8.50434011e-01, 5.53317804e+00, 4.80643802e-02, ...,
        5.64439886e+00, 6.04046994e+00, 2.34553007e+00],
       [9.00047655e-01, 5.58326555e+00, 9.75905051e-02, ...,
        5.69080651e+00, 6.08994656e+00, 2.39772606e+00],
       ...,
       [2.80094301e+04, 2.80157515e+04, 2.80060315e+04, ...,
        2.80092193e+04, 2.80126500e+04, 2.80126393e+04],
       [2.80094716e+04, 2.80158011e+04, 2.80060827e+04, ...,
        2.80092636e+04, 2.80126984e+04, 2.80126889e+04],
       [2.80095177e+04, 2.80158525e+04, 2.80061237e+04, ...,
        2.80093090e+04, 2.80127494e+04, 2.80127386e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.08284092, 0.0831073 , 0.08362588, ..., 0.01120231, 0.01064181,
       0.01051388]), 'R': array([0.00228695, 0.00213446, 0.00285204, 0.00321067, 0.00365173,
       0.00373493, 0.004012  , 0.00457713, 0.00465386, 0.00410246,
       0.00474951, 0.00476754, 0.00444532, 0.00420405, 0.00392762,
       0.00424327, 0.00432646, 0.00481065, 0.00466249, 0.00419982,
       0.00436073, 0.00473887, 0.00420294, 0.00465635, 0.00488324,
       0.00536672, 0.00499975, 0.00461785, 0.00510066, 0.00467961,
       0.00442059, 0.00424071, 0.00401605, 0.00387553, 0.00351485,
       0.00352298, 0.00341753, 0.00291015, 0.00297048, 0.00351081,
       0.00257014, 0.00284852, 0.00226375, 0.00254849, 0.00300961,
       0.00236991, 0.00161575, 0.00186902, 0.00167079, 0.00139084,
       0.00134892, 0.00105893, 0.0005339 , 0.00047869, 0.00138128,
       0.00183254, 0.00212201, 0.00192728, 0.00183799, 0.00171408,
       0.00243003, 0.00270122, 0.00213632, 0.00224068, 0.0022677 ,
       0.00263605, 0.00313444, 0.00372618, 0.00392178, 0.00392089,
       0.00313087, 0.00337081, 0.00380256, 0.00379854, 0.004062  ,
       0.00377377, 0.00345758, 0.00390663, 0.00421015, 0.00464146,
       0.00472256, 0.00539914, 0.00498249, 0.00474936, 0.00436867,
       0.0045065 , 0.00513141, 0.00540914, 0.00495976, 0.00521031,
       0.00552304, 0.00575252, 0.00577596, 0.0055005 , 0.00506938,
       0.00532248, 0.0053482 , 0.00489814, 0.0044122 , 0.00359945,
       0.00302093, 0.00354324, 0.00349642, 0.00341662, 0.00384526,
       0.00399007, 0.00452916, 0.00518118, 0.00541437, 0.00583378,
       0.00553779, 0.00600884, 0.00608417, 0.00600643, 0.00603902,
       0.00595657, 0.00609736, 0.00647628, 0.00708702, 0.00682915,
       0.00674852, 0.00662283, 0.00674633, 0.00660599, 0.00668334,
       0.00665366, 0.00726715, 0.00718588, 0.00691705, 0.00673465,
       0.00682926, 0.00679785, 0.00666215, 0.00681864, 0.00643877,
       0.0062544 , 0.00613789, 0.00619339, 0.00617627, 0.00578032,
       0.00578437, 0.00578488, 0.00567858, 0.00566443, 0.0054062 ,
       0.0055195 , 0.00566762, 0.00622809, 0.00591964, 0.00612646,
       0.00602148, 0.00598263, 0.00587443, 0.00552951, 0.00540202,
       0.00499263, 0.00494421, 0.00507548, 0.00505651, 0.00512853,
       0.0046464 , 0.00460556, 0.00419422, 0.00416975, 0.00447861,
       0.00361812, 0.00331576, 0.00321787, 0.0030383 , 0.00333406,
       0.00420724, 0.0043365 , 0.00488435, 0.00495697, 0.00513018,
       0.00544548, 0.00512059, 0.0046002 , 0.00379572, 0.00378975,
       0.00391246, 0.00328545, 0.00459374, 0.00435483, 0.00464982,
       0.00449695, 0.0045099 , 0.00404463, 0.00398557, 0.00414441,
       0.00487568, 0.00463972, 0.00525822, 0.00496853, 0.00472718,
       0.00510348, 0.00509075, 0.00570411, 0.00640708, 0.00633475,
       0.0061596 , 0.00620476, 0.00634984, 0.00718681, 0.00789389,
       0.00722203, 0.00778489, 0.00789072, 0.00772288, 0.00797892,
       0.00705228, 0.00710091, 0.00737716, 0.00791144, 0.00850909,
       0.00856188, 0.00865196, 0.00896583, 0.009121  , 0.00856541,
       0.00852674, 0.00828589, 0.00822759, 0.00829374, 0.00827985,
       0.0080739 , 0.00811891, 0.00813943, 0.00796317, 0.00802318,
       0.00750884, 0.00707684, 0.00747505, 0.00728393, 0.00775737,
       0.00711624, 0.00681486, 0.00694423, 0.00705415, 0.00715284,
       0.00727129, 0.00792414, 0.007648  , 0.00758349, 0.00779951,
       0.0071046 , 0.00761574, 0.00813884, 0.00786297, 0.00801447,
       0.00784034, 0.00794394, 0.00794457, 0.00749039, 0.00780871,
       0.00763834, 0.00793231, 0.00818517, 0.00823849, 0.00807587,
       0.00847221, 0.00865092, 0.00881505, 0.00826918, 0.00759307,
       0.00727147, 0.0071924 , 0.00687123, 0.00681445, 0.00663075,
       0.00702504, 0.0072533 , 0.00742965, 0.00748493, 0.00730834,
       0.00692381, 0.00686698, 0.00743257, 0.00762905, 0.00754213,
       0.00755441, 0.00756956, 0.00739534, 0.00689631, 0.00680228,
       0.00678834, 0.00655071, 0.00663409, 0.00655285, 0.00670664,
       0.00688779, 0.00743293, 0.00815098, 0.0078561 , 0.00861782,
       0.00857217, 0.00929562, 0.00899707, 0.0091027 , 0.00915111,
       0.00883173, 0.00863286, 0.00844656, 0.00839582, 0.00906306,
       0.00948772, 0.00913115, 0.00939399, 0.00935945, 0.00943217,
       0.00912897, 0.00922345, 0.0089766 , 0.00935157, 0.00911054,
       0.00988753, 0.01009249, 0.0105617 , 0.01029303, 0.01036907,
       0.01066302, 0.01031011, 0.00973671, 0.00987434, 0.01059322,
       0.01015479, 0.00948454, 0.00944311, 0.00863799, 0.00901907,
       0.00844327, 0.00833777, 0.00770081, 0.00766444, 0.00731979,
       0.00697691, 0.00637989, 0.00600879, 0.00578788, 0.00633088,
       0.0074875 , 0.00726946, 0.00791037, 0.00852527, 0.00849019,
       0.00819865, 0.00874598, 0.00843725, 0.00920025, 0.00950226,
       0.00959199, 0.00918466, 0.0093515 , 0.00954713, 0.00977903,
       0.00958   , 0.00985556, 0.00982814, 0.01036422, 0.01083202,
       0.010868  , 0.01098944, 0.01086672, 0.01101224, 0.01096206,
       0.01142842, 0.01128085, 0.01120415, 0.01090309, 0.01039967,
       0.010944  , 0.01111715, 0.01120231, 0.01064181, 0.01051388]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.031768555614320855  last value of R 0.032488382838009165
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.16
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.83
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.62
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.36
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.12
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.86
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.51
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.51
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.87
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.38
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.86
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.44
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.54
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-1.73
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.23
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.13
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.75
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.61
Realization 10, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.66
working on realization 10 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [0.46614888420865563, -1.5038875975681754, 2.8451364873162426, 0.30989304757523106, -2.418299858477908, -0.957663712515322, 1.396627667582739, 2.898846325357516, 2.4448786731318375, -0.38386182076150144, 1.9909213410586828, 3.0833907884805125, 2.207527759027176, 1.9737715552852642, -2.013314076733715, -2.3206851522449368, 1.1380846694191895, 2.488171488272121, -1.0471825229378422, 3.0740791701499868], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34048410>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8895., 8892., ..., 8893., 8895., 8894.],
       [8894., 8895., 8892., ..., 8893., 8895., 8894.],
       [8894., 8895., 8892., ..., 8893., 8895., 8894.]]), 'phi': array([[2.45787854e+00, 8.59843574e-01, 5.04801368e+00, ...,
        4.71189528e+00, 1.25871555e+00, 5.28705137e+00],
       [2.51202929e+00, 9.11280343e-01, 5.09675545e+00, ...,
        4.76621774e+00, 1.31093319e+00, 5.33663123e+00],
       [2.56131530e+00, 9.61669543e-01, 5.14698816e+00, ...,
        4.81517258e+00, 1.36101053e+00, 5.38373777e+00],
       ...,
       [2.80095709e+04, 2.80094415e+04, 2.80061266e+04, ...,
        2.80088553e+04, 2.80122056e+04, 2.80122657e+04],
       [2.80096201e+04, 2.80094898e+04, 2.80061773e+04, ...,
        2.80089032e+04, 2.80122516e+04, 2.80123162e+04],
       [2.80096697e+04, 2.80095355e+04, 2.80062230e+04, ...,
        2.80089513e+04, 2.80122981e+04, 2.80123606e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.20043712, 0.20075499, 0.20069883, ..., 0.03230934, 0.03230669,
       0.03248838]), 'R': array([0.03472648, 0.03492026, 0.03455022, 0.03418858, 0.03428973,
       0.03460662, 0.03422975, 0.03414887, 0.03452073, 0.03456499,
       0.03502251, 0.0354025 , 0.0352229 , 0.03565683, 0.03608009,
       0.03614285, 0.03575926, 0.03592917, 0.03599831, 0.03611924,
       0.03656068, 0.03658278, 0.03616406, 0.0368741 , 0.03782368,
       0.03813116, 0.03830926, 0.0385984 , 0.03903038, 0.03846873,
       0.03860579, 0.0386549 , 0.03813251, 0.03845291, 0.03823673,
       0.03798595, 0.03782925, 0.03801646, 0.03799828, 0.03813357,
       0.03774097, 0.03792795, 0.03779859, 0.03783205, 0.03709003,
       0.03681182, 0.03681091, 0.03628642, 0.0358534 , 0.03594604,
       0.03555248, 0.0356297 , 0.035657  , 0.03558109, 0.03595327,
       0.03554839, 0.03561149, 0.03486878, 0.03513712, 0.03500335,
       0.03487174, 0.03473659, 0.03457183, 0.03458876, 0.03470297,
       0.0351724 , 0.03478648, 0.03445459, 0.03477284, 0.03484648,
       0.03490054, 0.03474801, 0.03481067, 0.03457911, 0.03473452,
       0.0347987 , 0.03468396, 0.03483399, 0.03509409, 0.03489562,
       0.03545955, 0.0355495 , 0.03543026, 0.03554091, 0.03582501,
       0.03638242, 0.03689082, 0.03679904, 0.0367197 , 0.036087  ,
       0.03632594, 0.03607774, 0.03616327, 0.03616752, 0.03598991,
       0.036178  , 0.03642807, 0.03615783, 0.03573405, 0.03565764,
       0.03480808, 0.03452401, 0.03418535, 0.03348264, 0.03358613,
       0.03340231, 0.0330553 , 0.0324464 , 0.03236743, 0.03236471,
       0.03213349, 0.03231676, 0.03205763, 0.03188179, 0.03104785,
       0.03064809, 0.03074243, 0.03055243, 0.03042926, 0.03000524,
       0.02989935, 0.02975872, 0.02950489, 0.02910175, 0.0287258 ,
       0.02860473, 0.02891605, 0.02875123, 0.02894617, 0.02892866,
       0.0291075 , 0.02872391, 0.0288308 , 0.02902639, 0.02884319,
       0.02901525, 0.02929053, 0.02898247, 0.02948364, 0.02962355,
       0.02979821, 0.02946837, 0.02978912, 0.03009013, 0.03017119,
       0.02990979, 0.02913687, 0.02941961, 0.03002734, 0.03028289,
       0.03057341, 0.03130249, 0.03093102, 0.03134933, 0.03146386,
       0.03141478, 0.03161777, 0.03126986, 0.03091203, 0.03142575,
       0.03070551, 0.03036162, 0.03095566, 0.03070742, 0.03122041,
       0.03099726, 0.03176147, 0.03183993, 0.03211418, 0.03185333,
       0.0318831 , 0.03211221, 0.03146407, 0.03193989, 0.03215076,
       0.03224688, 0.03203974, 0.03167033, 0.03142779, 0.03101212,
       0.03123161, 0.03139936, 0.03110231, 0.03026844, 0.03014582,
       0.03003104, 0.02969898, 0.02911318, 0.02898893, 0.02901662,
       0.02915304, 0.02911174, 0.02913068, 0.02887425, 0.02845748,
       0.02803693, 0.02842152, 0.02874498, 0.02886913, 0.02890215,
       0.02872206, 0.02918532, 0.02952304, 0.02948597, 0.02979979,
       0.02990073, 0.02995782, 0.0300029 , 0.03026004, 0.03051556,
       0.02993841, 0.03008555, 0.02995232, 0.03009187, 0.03020493,
       0.02998593, 0.0294458 , 0.02944698, 0.02950472, 0.02960038,
       0.02920906, 0.02960073, 0.02960398, 0.02992882, 0.03006389,
       0.03050963, 0.03042575, 0.03038907, 0.03069562, 0.03093775,
       0.03086862, 0.03052577, 0.03021118, 0.03039791, 0.03045278,
       0.03000899, 0.03014997, 0.02993808, 0.02970863, 0.02940343,
       0.02919285, 0.02899858, 0.02876977, 0.02881768, 0.02895754,
       0.02881933, 0.02772953, 0.02699954, 0.02703604, 0.0267942 ,
       0.02678784, 0.02641738, 0.0266986 , 0.02687204, 0.02689409,
       0.02682187, 0.02731121, 0.02720641, 0.02694852, 0.02694788,
       0.02713851, 0.02771943, 0.02785508, 0.02769272, 0.02815254,
       0.02761847, 0.02775825, 0.02681759, 0.0263715 , 0.02677516,
       0.02634431, 0.02677876, 0.0272667 , 0.02667878, 0.02640173,
       0.02650042, 0.02674988, 0.0269425 , 0.02703384, 0.02734069,
       0.02720372, 0.02744224, 0.02753158, 0.02719221, 0.02730436,
       0.0271894 , 0.02734052, 0.02766565, 0.02837154, 0.02842568,
       0.02789795, 0.02844728, 0.02846708, 0.02828827, 0.02857723,
       0.02862154, 0.02847207, 0.02874964, 0.02835674, 0.0281825 ,
       0.02862514, 0.02894766, 0.02912474, 0.02970025, 0.02953461,
       0.02984916, 0.03034776, 0.02994469, 0.03013141, 0.02985115,
       0.02988297, 0.02989896, 0.02948462, 0.02938632, 0.02959846,
       0.029344  , 0.0297184 , 0.0299503 , 0.03014839, 0.03057294,
       0.03066751, 0.03051234, 0.0303669 , 0.03019569, 0.03061404,
       0.03087299, 0.03105499, 0.03100397, 0.03151281, 0.03117778,
       0.03147617, 0.03167106, 0.0316584 , 0.0317939 , 0.0322317 ,
       0.0319561 , 0.03206042, 0.03211571, 0.03278045, 0.03256742,
       0.03268885, 0.03266251, 0.03252511, 0.03288886, 0.03314402,
       0.03352029, 0.03374516, 0.03385601, 0.034103  , 0.03398661,
       0.03403844, 0.03405154, 0.03358316, 0.03397964, 0.03392325,
       0.03403039, 0.03413287, 0.03449774, 0.03432267, 0.03469753,
       0.03499249, 0.03452541, 0.03430832, 0.03393208, 0.03395198,
       0.0340052 , 0.03439875, 0.03426629, 0.03383934, 0.03350437,
       0.03357805, 0.03269094, 0.03230934, 0.03230669, 0.03248838]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.019457026633576353  last value of R 0.02203168997996514
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.04
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.88
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.48
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.30
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.00
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.98
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.22
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.84
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.37
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.69
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.24
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.78
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.10
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.18
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.73
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.55
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.31
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=3.00
Realization 11, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=3.07
min_std: 0.00014706931695079655
Realization 11, order_param_std_threshold to 0.00052, for {min_std, max_std} = {0.0001,0.0052} 
working on realization 11 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-2.9478443295232135, -0.428122746251852, 0.9618032669124013, 2.969502540011611, -1.4627590120826752, 1.864667665638576, -2.410835193078819, -1.7159673859632092, -2.060447402905866, -1.721594773749177, -0.6888151286019584, -0.9390876162912036, -0.748631982056172, 0.3131755631176887, 1.514935165793811, 2.715144620691249, -1.3908492062379307, 0.7050019247282706, -2.3019564515908253, -1.1752736892817373], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e34084810>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8894., 8892., ..., 8893., 8893., 8895.],
       [8894., 8894., 8892., ..., 8893., 8893., 8895.],
       [8894., 8894., 8892., ..., 8893., 8893., 8895.]]), 'phi': array([[0.00000000e+00, 2.53643551e+00, 4.06767573e+00, ...,
        3.70925651e+00, 8.05569575e-01, 1.93631008e+00],
       [5.29314691e-02, 2.58725752e+00, 4.12145453e+00, ...,
        3.76522947e+00, 8.54719010e-01, 1.98948981e+00],
       [1.07870041e-01, 2.64062398e+00, 4.17239611e+00, ...,
        3.81311747e+00, 9.04387069e-01, 2.04257160e+00],
       ...,
       [2.80079993e+04, 2.80080184e+04, 2.80045648e+04, ...,
        2.80076232e+04, 2.80049751e+04, 2.80112046e+04],
       [2.80080466e+04, 2.80080671e+04, 2.80046139e+04, ...,
        2.80076752e+04, 2.80050246e+04, 2.80112545e+04],
       [2.80080990e+04, 2.80081179e+04, 2.80046633e+04, ...,
        2.80077297e+04, 2.80050787e+04, 2.80113065e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.26466588, 0.264391  , 0.26465487, ..., 0.02210143, 0.02234507,
       0.02203169]), 'R': array([0.0133901 , 0.01321419, 0.01465768, 0.01551554, 0.01561407,
       0.01604563, 0.01564564, 0.01576012, 0.01626687, 0.01635143,
       0.0159024 , 0.01584784, 0.01630238, 0.01660475, 0.01625882,
       0.01622905, 0.01592861, 0.01592704, 0.01579238, 0.01480672,
       0.0147919 , 0.01420138, 0.0144791 , 0.01467999, 0.0144967 ,
       0.01443165, 0.01432394, 0.01440857, 0.01400092, 0.01391888,
       0.01408627, 0.01408841, 0.01357909, 0.01400771, 0.01403777,
       0.01405436, 0.01475079, 0.01507359, 0.01525869, 0.01564264,
       0.01520073, 0.0150676 , 0.01552459, 0.01586676, 0.01618136,
       0.0163125 , 0.01648592, 0.01683813, 0.01752249, 0.01745726,
       0.01718983, 0.01712448, 0.01655012, 0.01632044, 0.01653644,
       0.01704918, 0.01710836, 0.01638507, 0.01716835, 0.01680341,
       0.01610559, 0.01656761, 0.01700511, 0.01673902, 0.0164849 ,
       0.01706947, 0.01693929, 0.01705023, 0.01692979, 0.01729692,
       0.01776548, 0.01713462, 0.01693827, 0.01716249, 0.01708075,
       0.01733831, 0.01709827, 0.01669396, 0.01669922, 0.01571507,
       0.01531696, 0.01494947, 0.01486334, 0.01496294, 0.01460479,
       0.01494249, 0.01451833, 0.01412036, 0.01405976, 0.0141581 ,
       0.01391918, 0.01360252, 0.01379863, 0.01360666, 0.01305565,
       0.01253722, 0.01216305, 0.01161478, 0.01172424, 0.01171651,
       0.012236  , 0.01196524, 0.01211206, 0.01218759, 0.01209015,
       0.01240712, 0.01243481, 0.01275112, 0.01238636, 0.01293998,
       0.01395621, 0.01443224, 0.01454045, 0.01427291, 0.01461923,
       0.01531418, 0.01510262, 0.01394969, 0.01399453, 0.01460532,
       0.01452987, 0.01475003, 0.01563727, 0.01629566, 0.0164563 ,
       0.01671266, 0.01687767, 0.01774918, 0.01819529, 0.01899157,
       0.01911126, 0.01968154, 0.01924737, 0.01798874, 0.01898726,
       0.01906968, 0.01904513, 0.01874854, 0.0186906 , 0.01849529,
       0.01844807, 0.01806675, 0.01830602, 0.01832855, 0.01912237,
       0.01847178, 0.01820628, 0.01889583, 0.0193945 , 0.01956331,
       0.01961827, 0.01958555, 0.01918986, 0.01952652, 0.01959783,
       0.01973892, 0.02035391, 0.02129542, 0.02128148, 0.02133618,
       0.02058898, 0.02113139, 0.02118799, 0.02094205, 0.02117349,
       0.02057851, 0.02073365, 0.02090312, 0.02098711, 0.02071714,
       0.02049554, 0.02005292, 0.02078112, 0.02121224, 0.02083146,
       0.02168602, 0.02229729, 0.02281925, 0.0233644 , 0.02327467,
       0.02291496, 0.02308145, 0.02329371, 0.02340442, 0.0227885 ,
       0.0234401 , 0.02401454, 0.02411812, 0.0239874 , 0.02354716,
       0.02350337, 0.02360809, 0.02344696, 0.02263685, 0.02251971,
       0.0226642 , 0.02336321, 0.02310337, 0.02305956, 0.02353414,
       0.02310398, 0.02299901, 0.02299022, 0.02249764, 0.02224771,
       0.02262261, 0.02281959, 0.02255204, 0.02208477, 0.02197164,
       0.02161334, 0.02203201, 0.02142892, 0.02091844, 0.02116791,
       0.02022415, 0.02088744, 0.02059645, 0.02096436, 0.02106228,
       0.0197379 , 0.01923778, 0.01951839, 0.01924702, 0.01849893,
       0.01926406, 0.02003983, 0.01981102, 0.01881644, 0.01876268,
       0.01919869, 0.01940668, 0.01929862, 0.01957955, 0.01950078,
       0.0198334 , 0.0201868 , 0.01931272, 0.0193729 , 0.01992014,
       0.01952392, 0.02018642, 0.02002358, 0.02041761, 0.02042682,
       0.0205669 , 0.02042481, 0.02024813, 0.020755  , 0.02161824,
       0.02145467, 0.02132815, 0.02180413, 0.02141857, 0.0211671 ,
       0.02198159, 0.02243359, 0.02218152, 0.02192336, 0.02158244,
       0.02135523, 0.02213611, 0.02215415, 0.02241096, 0.02330977,
       0.02338233, 0.02255357, 0.02305091, 0.02355895, 0.02387249,
       0.02440566, 0.0251865 , 0.02543344, 0.02474745, 0.02502109,
       0.02553186, 0.02549118, 0.02563418, 0.02489358, 0.02419303,
       0.02351315, 0.02377042, 0.02361108, 0.02324651, 0.02256008,
       0.02225235, 0.02123571, 0.02090746, 0.02055894, 0.02049866,
       0.02087262, 0.02123997, 0.02073851, 0.02067034, 0.02049077,
       0.02162973, 0.02152242, 0.02034709, 0.01989759, 0.01979465,
       0.01957569, 0.01987444, 0.02005221, 0.01974169, 0.01994094,
       0.01951801, 0.02054501, 0.0204758 , 0.02038722, 0.02080893,
       0.02047072, 0.02037928, 0.02071585, 0.02105368, 0.0214232 ,
       0.02115246, 0.02203687, 0.02221284, 0.02184783, 0.02273287,
       0.0237114 , 0.02355085, 0.02378948, 0.02388943, 0.02414285,
       0.02410589, 0.02443043, 0.02435372, 0.02482629, 0.02482495,
       0.02524818, 0.02498248, 0.02452798, 0.02475073, 0.02438965,
       0.02448255, 0.02484861, 0.02433471, 0.02394456, 0.02403717,
       0.02348175, 0.0235198 , 0.0228503 , 0.0224094 , 0.02287688,
       0.02359267, 0.02381163, 0.02384415, 0.02393186, 0.02361129,
       0.02295571, 0.02296919, 0.0230402 , 0.02245311, 0.0222543 ,
       0.02196969, 0.02261066, 0.02229618, 0.0229945 , 0.02263815,
       0.02317494, 0.02295677, 0.02243967, 0.02178819, 0.02217609,
       0.02177527, 0.02140966, 0.02191353, 0.02226761, 0.02162813,
       0.02252343, 0.02235853, 0.02210143, 0.02234507, 0.02203169]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.05712554147520681  last value of R 0.062478667979776255
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.12
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.95
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.47
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.45
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.80
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.29
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.04
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-2.18
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=0.91
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-2.33
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=0.75
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-2.49
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=0.41
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.96
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.04
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=2.96
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=-0.52
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.37
Realization 12, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.24
min_std: 0.00015325359746097287
Realization 12, order_param_std_threshold to 0.00030, for {min_std, max_std} = {0.0002,0.0022} 
working on realization 12 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-2.3174499750932407, 3.0069224461511928, -1.2316965212037785, 0.38790646331389134, 1.5483106976923269, -1.2813394178872333, 0.9864063262917622, -1.563158510410076, -1.5603770104086168, 0.2781997256789466, -1.575314902543521, -3.084084406593672, 2.7229105029289187, -1.7234878493841834, 2.0276842060655076, 0.9872610906870873, 0.10607855188383564, 0.9285920660455389, -0.804219365566317, 0.2304350703538831], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e11231210>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8896., 8894., ..., 8893., 8895., 8894.],
       [8894., 8896., 8894., ..., 8893., 8895., 8894.],
       [8894., 8896., 8894., ..., 8893., 8895., 8894.]]), 'phi': array([[6.43823295e-01, 6.09404372e+00, 1.77571371e+00, ...,
        4.05764908e+00, 2.28087633e+00, 3.43089399e+00],
       [6.91810652e-01, 6.14332647e+00, 1.82568228e+00, ...,
        4.10649969e+00, 2.32997735e+00, 3.48563111e+00],
       [7.40345558e-01, 6.19026347e+00, 1.87605925e+00, ...,
        4.15587123e+00, 2.37537225e+00, 3.53310590e+00],
       ...,
       [2.80072715e+04, 2.80199936e+04, 2.80102216e+04, ...,
        2.80078459e+04, 2.80112184e+04, 2.80113984e+04],
       [2.80073205e+04, 2.80200400e+04, 2.80102728e+04, ...,
        2.80078947e+04, 2.80112681e+04, 2.80114516e+04],
       [2.80073662e+04, 2.80200911e+04, 2.80103193e+04, ...,
        2.80079502e+04, 2.80113169e+04, 2.80115008e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.13663902, 0.13688015, 0.13705681, ..., 0.062097  , 0.06243019,
       0.06247867]), 'R': array([0.06049443, 0.06060687, 0.06058535, 0.06037155, 0.06032678,
       0.06031734, 0.06000695, 0.06001941, 0.06006074, 0.05965318,
       0.05955097, 0.05932759, 0.05854581, 0.05837384, 0.05818361,
       0.05807817, 0.05725569, 0.05629728, 0.05710871, 0.05642489,
       0.0556599 , 0.05529121, 0.05500311, 0.05427469, 0.05402646,
       0.05371755, 0.05440372, 0.05471848, 0.05451661, 0.05446353,
       0.05401954, 0.05415329, 0.05414329, 0.05468791, 0.05482032,
       0.05510702, 0.05521744, 0.05480241, 0.05518161, 0.05490666,
       0.05494715, 0.05509361, 0.05515333, 0.05685157, 0.05727113,
       0.05715735, 0.05784901, 0.05800048, 0.058599  , 0.05871773,
       0.05872403, 0.05966579, 0.05966073, 0.06019275, 0.05983905,
       0.05987117, 0.05953543, 0.0593408 , 0.05924647, 0.05907869,
       0.05825744, 0.05834216, 0.05871872, 0.05878591, 0.05870301,
       0.05901825, 0.05906268, 0.05912117, 0.0587157 , 0.05840017,
       0.05819379, 0.05848025, 0.0581668 , 0.05806791, 0.05841553,
       0.0581765 , 0.0579789 , 0.0568526 , 0.05669436, 0.05688887,
       0.05659539, 0.05648776, 0.05698675, 0.05696795, 0.056401  ,
       0.05672796, 0.05682   , 0.05598916, 0.05556095, 0.05547382,
       0.05527969, 0.05471675, 0.05449613, 0.05457465, 0.05440237,
       0.05407957, 0.05389686, 0.05462157, 0.05466454, 0.05400529,
       0.05355891, 0.05326068, 0.05404688, 0.05481622, 0.0556377 ,
       0.05633787, 0.05610149, 0.05642206, 0.055811  , 0.05653506,
       0.05655337, 0.05631527, 0.05707551, 0.05772296, 0.05690426,
       0.05733853, 0.05719138, 0.05699146, 0.0571935 , 0.0581083 ,
       0.05756844, 0.05726729, 0.05827419, 0.05808217, 0.05825282,
       0.05817036, 0.05799294, 0.05810553, 0.05814489, 0.05904245,
       0.05959955, 0.05901266, 0.05840817, 0.05878249, 0.05822689,
       0.05818857, 0.05806062, 0.05818188, 0.05833344, 0.05782057,
       0.05749343, 0.05660771, 0.05646012, 0.05611837, 0.05565849,
       0.05578588, 0.05605856, 0.05552093, 0.05532601, 0.05508166,
       0.05450697, 0.05363198, 0.0525416 , 0.05276126, 0.05248551,
       0.05171074, 0.05185231, 0.05146034, 0.05124552, 0.05082763,
       0.05055488, 0.05041567, 0.0511076 , 0.0514057 , 0.05244625,
       0.05298463, 0.05347318, 0.05429004, 0.05467382, 0.05461483,
       0.05523323, 0.05546674, 0.05568806, 0.05578434, 0.05673372,
       0.05705134, 0.05615693, 0.05673642, 0.05641792, 0.05702145,
       0.05748016, 0.05759437, 0.05811262, 0.05876903, 0.05895408,
       0.0592637 , 0.05970058, 0.0596963 , 0.05967416, 0.05929166,
       0.05986089, 0.05941784, 0.05903856, 0.05980217, 0.05967566,
       0.05998809, 0.06003107, 0.05943741, 0.05922298, 0.05834614,
       0.05817333, 0.05743972, 0.05734961, 0.05698571, 0.05671506,
       0.05583191, 0.05530818, 0.05481014, 0.05521694, 0.05467624,
       0.05480489, 0.05500606, 0.05419064, 0.05459033, 0.05475719,
       0.05456489, 0.05448186, 0.05446988, 0.05498207, 0.05452251,
       0.05495093, 0.05544511, 0.05523416, 0.05545338, 0.05612159,
       0.05558062, 0.05548058, 0.05564365, 0.05478809, 0.05466559,
       0.05519484, 0.0563267 , 0.0562244 , 0.05621517, 0.05635611,
       0.05668689, 0.0570845 , 0.05655025, 0.05652972, 0.05711747,
       0.05827429, 0.05909827, 0.05830117, 0.05795715, 0.05805708,
       0.05778173, 0.05848828, 0.05895164, 0.058984  , 0.05907751,
       0.05875915, 0.05916347, 0.05927295, 0.0592755 , 0.05889067,
       0.05883645, 0.05822155, 0.05788546, 0.05781107, 0.05725189,
       0.05762927, 0.05736841, 0.05640983, 0.05598403, 0.05507789,
       0.05492472, 0.05463745, 0.05432032, 0.05443494, 0.05476959,
       0.05523782, 0.05518974, 0.05508549, 0.05588047, 0.05570502,
       0.05560203, 0.05593534, 0.05578107, 0.05585182, 0.0556781 ,
       0.05594313, 0.05532608, 0.05560146, 0.05538748, 0.05508626,
       0.05553086, 0.05567345, 0.05508995, 0.05420467, 0.05414558,
       0.05486784, 0.055761  , 0.05556892, 0.05590483, 0.05630815,
       0.05591454, 0.05688411, 0.05706095, 0.05732356, 0.05772956,
       0.05824631, 0.05812969, 0.05831711, 0.05879795, 0.05911894,
       0.05928657, 0.05886376, 0.05932478, 0.05890869, 0.05987022,
       0.06040656, 0.06022603, 0.06005454, 0.06069232, 0.05971962,
       0.05928049, 0.05966404, 0.06013337, 0.06042261, 0.0604505 ,
       0.0605138 , 0.05988104, 0.05946021, 0.05944738, 0.05911909,
       0.05897506, 0.0583779 , 0.05820857, 0.0583724 , 0.05813847,
       0.05812126, 0.05800457, 0.05758803, 0.05808442, 0.05769205,
       0.05785496, 0.05788014, 0.05800081, 0.05720582, 0.05677457,
       0.05691386, 0.05670878, 0.05732362, 0.05708448, 0.05724651,
       0.0571653 , 0.05811155, 0.05801466, 0.05840963, 0.05851939,
       0.05831355, 0.05848156, 0.05915848, 0.05910047, 0.05902675,
       0.05953482, 0.05923536, 0.0590571 , 0.05954203, 0.05947792,
       0.0595713 , 0.05952734, 0.05983236, 0.06031826, 0.06138768,
       0.06072959, 0.06030453, 0.06108032, 0.06157707, 0.06131118,
       0.06207439, 0.06216017, 0.062097  , 0.06243019, 0.06247867]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.06237604130032575  last value of R 0.056909695338276375
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.14
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.88
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.46
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.35
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.98
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.97
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.42
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.58
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.72
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.34
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.74
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.36
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.67
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-1.58
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.25
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-1.96
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.79
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.42
Realization 13, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.64
working on realization 13 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [1.0789013352976813, 3.066341224396486, -1.716722203466669, 1.7591635127039718, 0.6857560605560993, -1.9488448060519048, 0.7210299683358485, -2.3358240532529626, -1.5281030348437883, -1.9979472163471008, -1.8916639969159528, 1.4227784915954214, 0.11758866175336635, -1.0158607209895232, -2.8663462322149624, 1.6893014301839973, -0.8744178982849307, -0.1522399155807328, -0.4370622814527021, -0.5119864922609199], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e11242110>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8892., 8892., 8892., ..., 8898., 8898., 8898.],
       [8892., 8892., 8892., ..., 8898., 8898., 8898.],
       [8892., 8892., 8892., ..., 8898., 8898., 8898.]]), 'phi': array([[3.93305529e+00, 5.97124634e+00, 9.11225584e-01, ...,
        2.78875151e+00, 2.15103043e+00, 2.24733012e+00],
       [3.98278840e+00, 6.02143245e+00, 9.61117129e-01, ...,
        2.83685140e+00, 2.20150280e+00, 2.29687471e+00],
       [4.03839039e+00, 6.07104968e+00, 1.01161554e+00, ...,
        2.88640326e+00, 2.25679580e+00, 2.34578740e+00],
       ...,
       [2.80055468e+04, 2.80057120e+04, 2.80021995e+04, ...,
        2.80235725e+04, 2.80205271e+04, 2.80207508e+04],
       [2.80055942e+04, 2.80057620e+04, 2.80022528e+04, ...,
        2.80236269e+04, 2.80205852e+04, 2.80208065e+04],
       [2.80056433e+04, 2.80058070e+04, 2.80023009e+04, ...,
        2.80236788e+04, 2.80206382e+04, 2.80208548e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.22087701, 0.22136334, 0.22093993, ..., 0.05832935, 0.05702834,
       0.0569097 ]), 'R': array([0.06212239, 0.0614917 , 0.06031268, 0.06053238, 0.06043731,
       0.06051478, 0.06002798, 0.06020581, 0.06015225, 0.05969738,
       0.05926103, 0.05938867, 0.05888764, 0.05819071, 0.058062  ,
       0.0580087 , 0.05767475, 0.05810385, 0.05765395, 0.05701504,
       0.05631962, 0.05609247, 0.05579989, 0.05559974, 0.05587486,
       0.05603942, 0.05651374, 0.05605631, 0.05585706, 0.05609965,
       0.0565027 , 0.05716306, 0.05725623, 0.05845956, 0.05770656,
       0.05808773, 0.05868649, 0.05848301, 0.05883453, 0.05961225,
       0.0594181 , 0.05952729, 0.05998555, 0.05996505, 0.06054663,
       0.06073843, 0.06077739, 0.06065984, 0.06107107, 0.06075409,
       0.06129546, 0.06117047, 0.06137534, 0.0615757 , 0.06185462,
       0.06184641, 0.06238403, 0.06170589, 0.06157072, 0.06113093,
       0.06096243, 0.06067155, 0.06010528, 0.05939355, 0.05882255,
       0.05807304, 0.05766294, 0.05781432, 0.05782681, 0.05768233,
       0.0569326 , 0.0563075 , 0.05666992, 0.05602483, 0.05619067,
       0.05586522, 0.05614261, 0.05698039, 0.05672449, 0.05649988,
       0.05694898, 0.05660579, 0.05725369, 0.05751541, 0.05752445,
       0.05745689, 0.05717516, 0.05740409, 0.05752198, 0.05822958,
       0.05819222, 0.05874087, 0.05866381, 0.05902446, 0.05907744,
       0.05950609, 0.05955313, 0.06019058, 0.0591838 , 0.05896522,
       0.05882098, 0.0593925 , 0.06050396, 0.0597146 , 0.05907916,
       0.05885728, 0.05867125, 0.05939521, 0.05901846, 0.0595621 ,
       0.05917682, 0.05957275, 0.05922041, 0.05939468, 0.05950988,
       0.0589662 , 0.05832574, 0.0589453 , 0.05866709, 0.05901285,
       0.05867455, 0.05865213, 0.05881777, 0.05860979, 0.058465  ,
       0.058025  , 0.05776984, 0.05798909, 0.05874571, 0.05932307,
       0.05813548, 0.05802162, 0.05821822, 0.05763861, 0.05699208,
       0.05736553, 0.05723926, 0.05661731, 0.05629834, 0.05644895,
       0.05721538, 0.05698215, 0.05741742, 0.05830513, 0.05802935,
       0.05797795, 0.0575389 , 0.05823413, 0.05861063, 0.05886086,
       0.05878282, 0.05930748, 0.06012879, 0.06100197, 0.06094071,
       0.06139818, 0.06220683, 0.06239193, 0.06363167, 0.06404782,
       0.06471177, 0.06558655, 0.06615095, 0.06665142, 0.06589323,
       0.06636908, 0.06711788, 0.06678657, 0.0665891 , 0.06750836,
       0.06818426, 0.0677776 , 0.0675168 , 0.06776348, 0.06772313,
       0.06728685, 0.06825745, 0.0678583 , 0.06802477, 0.06808186,
       0.06812707, 0.06766102, 0.06786247, 0.0673492 , 0.06739843,
       0.06732234, 0.06698891, 0.06687384, 0.0673002 , 0.06678277,
       0.06707162, 0.0665256 , 0.0667664 , 0.06615078, 0.06602135,
       0.06527621, 0.06473683, 0.06531104, 0.06571944, 0.06624235,
       0.06620149, 0.06638625, 0.06650163, 0.06567153, 0.06522522,
       0.06490853, 0.06491899, 0.06395732, 0.0642879 , 0.06416063,
       0.06443316, 0.06461406, 0.06468052, 0.06510272, 0.06569521,
       0.06584405, 0.06591978, 0.06604804, 0.06615402, 0.06649704,
       0.06750631, 0.06830633, 0.06864696, 0.06905164, 0.06972486,
       0.07054957, 0.06965448, 0.07043254, 0.07055455, 0.07053927,
       0.07123102, 0.07158571, 0.07088152, 0.07139419, 0.07123317,
       0.07033854, 0.07052384, 0.07059603, 0.0705699 , 0.07083481,
       0.07095057, 0.07110374, 0.07131809, 0.07129529, 0.07131908,
       0.07060182, 0.0708649 , 0.07052988, 0.07080961, 0.07097235,
       0.07011496, 0.06913936, 0.06831272, 0.06854259, 0.06881589,
       0.06906306, 0.06969155, 0.06903096, 0.06855825, 0.06795676,
       0.06701316, 0.06720141, 0.06642449, 0.06654355, 0.06588679,
       0.06515234, 0.06539054, 0.06561421, 0.06586375, 0.06560522,
       0.06587208, 0.06595104, 0.06609804, 0.06551797, 0.06608496,
       0.0659544 , 0.06545214, 0.06564194, 0.06634817, 0.06693405,
       0.0664923 , 0.06647796, 0.0653927 , 0.06438173, 0.06418946,
       0.06394223, 0.06390658, 0.06380059, 0.06400012, 0.06440849,
       0.06426359, 0.0648293 , 0.0656494 , 0.06548967, 0.06488106,
       0.06567888, 0.06629945, 0.06604701, 0.0672204 , 0.06734062,
       0.06682012, 0.06695132, 0.06726383, 0.06670717, 0.06618007,
       0.06575274, 0.06574318, 0.06540299, 0.06518192, 0.06467916,
       0.06487457, 0.06445817, 0.06434734, 0.06412885, 0.06443102,
       0.0638136 , 0.06261972, 0.06223672, 0.06245648, 0.0627002 ,
       0.0622032 , 0.06206332, 0.06176214, 0.06149939, 0.06217639,
       0.06226301, 0.06183375, 0.06171008, 0.06121355, 0.06131236,
       0.06060735, 0.06043276, 0.05966921, 0.05905491, 0.05951497,
       0.05939552, 0.05944108, 0.058804  , 0.05863668, 0.05774479,
       0.05739165, 0.05785998, 0.05788389, 0.0581555 , 0.05851696,
       0.05941994, 0.05896747, 0.05871475, 0.05901089, 0.05931945,
       0.05917446, 0.05913364, 0.05917126, 0.05949114, 0.05975954,
       0.05974094, 0.05930013, 0.05950151, 0.06029671, 0.06010978,
       0.06093841, 0.06058226, 0.06018258, 0.05950206, 0.05969187,
       0.05989485, 0.06029971, 0.05969867, 0.05958005, 0.05904904,
       0.0591765 , 0.05913095, 0.05832935, 0.05702834, 0.0569097 ]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.02151304951339501  last value of R 0.015813974747736055
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.19
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.73
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.67
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.32
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.01
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.90
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.20
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.81
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.28
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.76
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.32
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.99
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.00
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.34
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.58
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.77
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=-0.04
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.87
Realization 14, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.98
min_std: 0.0001750075645496778
Realization 14, order_param_std_threshold to 0.00045, for {min_std, max_std} = {0.0002,0.0039} 
working on realization 14 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [2.140451129490371, 0.6747428029980354, 2.1865064650164276, -0.8933700963653597, 1.6539230308911925, 1.1379877617757144, -0.5940605032119555, 0.4830852868126603, -0.22091379871108296, -0.5119602758992232, -1.043338212725497, 0.5554103481856925, -1.8554348573563795, 2.6047214632260562, -2.1194970723559066, 1.3708662729391907, -2.6353420034993937, 0.5661158288611543, 0.7587083955887826, 1.7702398431548634], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e11254ed0>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8898., 8898., 8899., ..., 8893., 8894., 8893.],
       [8898., 8898., 8899., ..., 8893., 8894., 8893.],
       [8898., 8898., 8899., ..., 8893., 8894., 8893.]]), 'phi': array([[4.70881780e+00, 3.22870702e+00, 4.93936512e+00, ...,
        3.24467122e+00, 3.22646348e+00, 4.25061457e+00],
       [4.75268306e+00, 3.27248248e+00, 4.99263686e+00, ...,
        3.29387744e+00, 3.27857852e+00, 4.30004478e+00],
       [4.80040681e+00, 3.32366477e+00, 5.03811827e+00, ...,
        3.34398771e+00, 3.32503780e+00, 4.34878759e+00],
       ...,
       [2.80244694e+04, 2.80242886e+04, 2.80271436e+04, ...,
        2.80056481e+04, 2.80090472e+04, 2.80089145e+04],
       [2.80245219e+04, 2.80243441e+04, 2.80271940e+04, ...,
        2.80057004e+04, 2.80090918e+04, 2.80089624e+04],
       [2.80245723e+04, 2.80243894e+04, 2.80272482e+04, ...,
        2.80057544e+04, 2.80091425e+04, 2.80090175e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.30132732, 0.30127846, 0.3018805 , ..., 0.01591137, 0.01542379,
       0.01581397]), 'R': array([0.02781515, 0.02685036, 0.02599544, 0.02568127, 0.02606132,
       0.02646883, 0.02692365, 0.02645073, 0.02645277, 0.02627124,
       0.02641078, 0.02592463, 0.02624127, 0.02591701, 0.0262568 ,
       0.02589791, 0.02565882, 0.02614225, 0.02679296, 0.02657436,
       0.02686416, 0.02678354, 0.02694085, 0.02699968, 0.02624349,
       0.02625369, 0.02588678, 0.02577687, 0.02591337, 0.02630093,
       0.02672423, 0.02696407, 0.02726797, 0.02703601, 0.02731528,
       0.02751801, 0.02747366, 0.02714864, 0.02708592, 0.02706082,
       0.02640731, 0.02589416, 0.02589738, 0.02546147, 0.02503832,
       0.02484294, 0.0244346 , 0.02490038, 0.02536737, 0.02534148,
       0.02537775, 0.02553295, 0.02562924, 0.02510306, 0.02506303,
       0.02569193, 0.02633445, 0.02610595, 0.02570036, 0.02565623,
       0.02537048, 0.02527148, 0.02504481, 0.02441165, 0.02397104,
       0.02341694, 0.02344401, 0.0233036 , 0.02352493, 0.02369328,
       0.0237165 , 0.02403776, 0.02412453, 0.024331  , 0.02423312,
       0.02452025, 0.02445617, 0.02432404, 0.0243403 , 0.02492524,
       0.02536937, 0.02494019, 0.02481541, 0.02454223, 0.0248816 ,
       0.02454816, 0.02464895, 0.02456172, 0.02457381, 0.02494422,
       0.02462352, 0.02503285, 0.02514358, 0.02525453, 0.02578879,
       0.02575256, 0.02511889, 0.02481755, 0.02531708, 0.02511999,
       0.02477775, 0.02541047, 0.02558016, 0.02519785, 0.02532147,
       0.02542908, 0.02526109, 0.02487664, 0.02434623, 0.02419297,
       0.02450963, 0.02445156, 0.0241627 , 0.02458633, 0.02487444,
       0.02460856, 0.02436425, 0.02370855, 0.02388239, 0.02302717,
       0.02296654, 0.022875  , 0.02294563, 0.02309878, 0.02283434,
       0.02256825, 0.02265255, 0.02283035, 0.02306308, 0.02272583,
       0.02275918, 0.02276926, 0.0229967 , 0.0232839 , 0.0234935 ,
       0.023707  , 0.02370681, 0.02311311, 0.02238835, 0.02247196,
       0.02216693, 0.02205665, 0.02239719, 0.02181609, 0.02204545,
       0.02265111, 0.02239886, 0.02269254, 0.023023  , 0.02292673,
       0.02316037, 0.02298356, 0.02318801, 0.02324965, 0.02337214,
       0.0230467 , 0.02312632, 0.02388042, 0.02374154, 0.02414931,
       0.02395261, 0.02433967, 0.02407975, 0.02394973, 0.02423224,
       0.02441773, 0.02441401, 0.02429412, 0.02442803, 0.02445976,
       0.02391105, 0.02395544, 0.0236018 , 0.02359631, 0.02380803,
       0.02342278, 0.02337589, 0.02291451, 0.02260292, 0.02251099,
       0.02252918, 0.02248644, 0.02248909, 0.02262976, 0.02261934,
       0.02260766, 0.02195841, 0.0225375 , 0.02282262, 0.02212649,
       0.02163043, 0.02032946, 0.02073149, 0.02042727, 0.02011418,
       0.02006928, 0.01943854, 0.01897917, 0.01910127, 0.01936586,
       0.01946749, 0.01906875, 0.01870866, 0.01895769, 0.01923287,
       0.01958382, 0.01976788, 0.02012213, 0.02033168, 0.02001936,
       0.01996341, 0.01964436, 0.01958992, 0.01946918, 0.01994518,
       0.02034801, 0.01999273, 0.02006857, 0.01967036, 0.01963575,
       0.01925223, 0.01927682, 0.01933771, 0.01909395, 0.01917988,
       0.01914048, 0.01930659, 0.01998538, 0.02010231, 0.01987081,
       0.0199714 , 0.02002456, 0.01999809, 0.020028  , 0.01916612,
       0.0191125 , 0.01940104, 0.01934548, 0.01962967, 0.01997185,
       0.01944988, 0.01934429, 0.01998616, 0.01993275, 0.0200088 ,
       0.01954642, 0.01924844, 0.01914645, 0.01877095, 0.0180933 ,
       0.01758527, 0.01781021, 0.01733486, 0.01801687, 0.01816623,
       0.01819186, 0.01772145, 0.01725677, 0.01707392, 0.01720184,
       0.01730207, 0.01738706, 0.01725508, 0.01735855, 0.01740183,
       0.01744349, 0.01712554, 0.01740392, 0.01783802, 0.01751418,
       0.01729072, 0.01719187, 0.01752055, 0.01762553, 0.01827958,
       0.01845999, 0.01828918, 0.01827859, 0.01819055, 0.01821011,
       0.01837417, 0.01814957, 0.01827815, 0.01827834, 0.01842575,
       0.01843773, 0.01870867, 0.01898586, 0.01916986, 0.01908728,
       0.01899758, 0.01867844, 0.01835385, 0.01870907, 0.01876635,
       0.01911714, 0.01916876, 0.01877936, 0.01913757, 0.01924024,
       0.01956942, 0.02021794, 0.02006475, 0.01983656, 0.01964758,
       0.01965353, 0.01914973, 0.01915293, 0.01899918, 0.01875279,
       0.01800341, 0.01795986, 0.01800288, 0.01829189, 0.01860066,
       0.01864485, 0.01802101, 0.01840651, 0.01830103, 0.0177421 ,
       0.01779337, 0.01757438, 0.01772873, 0.01729592, 0.01730205,
       0.01718996, 0.01706515, 0.01735406, 0.01735552, 0.0172849 ,
       0.01704201, 0.01640636, 0.01674094, 0.01625678, 0.01692958,
       0.01738613, 0.0178152 , 0.01785385, 0.01817069, 0.01768242,
       0.01749033, 0.01752034, 0.0178167 , 0.01835554, 0.01770055,
       0.01749443, 0.01766524, 0.01820051, 0.01793962, 0.0172881 ,
       0.01726358, 0.01753567, 0.017916  , 0.01769656, 0.01756875,
       0.01768519, 0.01760561, 0.01725789, 0.01758599, 0.01751607,
       0.01742218, 0.01755061, 0.01744803, 0.01675338, 0.01628886,
       0.01548508, 0.01533818, 0.01520465, 0.01507347, 0.01563633,
       0.01536412, 0.01591587, 0.01591137, 0.01542379, 0.01581397]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.02256947203202634  last value of R 0.01653338118447263
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.11
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.83
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.58
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.34
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.01
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.98
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.22
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.79
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.36
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.70
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.35
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.97
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.06
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.32
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=0.57
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.83
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.13
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=2.90
Realization 15, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=2.87
min_std: 0.0001883576616118383
Realization 15, order_param_std_threshold to 0.00038, for {min_std, max_std} = {0.0002,0.0028} 
working on realization 15 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [0.8488246701698423, 0.7548101707275405, -1.486445655339741, 0.11021294496767986, 1.3711733081371298, -2.217526582277514, 0.02154889385412284, -0.16378887834829436, 2.218688432435857, -2.3828181134509685, -1.5164997140141272, 3.1167652551475644, 1.6448141650689792, 0.25295553801754256, 1.6603846670846183, 2.968454453082188, 2.8376005955885875, 0.7867103770246766, 0.05154565306174774, 0.3922790471020803], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e111f5dd0>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8894., 8892., ..., 8892., 8893., 8893.],
       [8894., 8894., 8892., ..., 8892., 8893., 8893.],
       [8894., 8894., 8892., ..., 8892., 8893., 8893.]]), 'phi': array([[3.25188055e+00, 3.09685470e+00, 7.44005083e-01, ...,
        3.21475402e+00, 2.30592739e+00, 2.66787231e+00],
       [3.30053635e+00, 3.14415246e+00, 7.91672398e-01, ...,
        3.26136383e+00, 2.35837801e+00, 2.71865440e+00],
       [3.35058225e+00, 3.19250511e+00, 8.47399057e-01, ...,
        3.30945212e+00, 2.41110959e+00, 2.76484622e+00],
       ...,
       [2.80106110e+04, 2.80106927e+04, 2.80008467e+04, ...,
        2.80041706e+04, 2.80076751e+04, 2.80077313e+04],
       [2.80106666e+04, 2.80107463e+04, 2.80009005e+04, ...,
        2.80042200e+04, 2.80077271e+04, 2.80077815e+04],
       [2.80107223e+04, 2.80107977e+04, 2.80009469e+04, ...,
        2.80042685e+04, 2.80077740e+04, 2.80078263e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.23656134, 0.23674295, 0.23715459, ..., 0.01703866, 0.01735994,
       0.01653338]), 'R': array([0.02874589, 0.02861655, 0.02874807, 0.02933348, 0.02940602,
       0.02900904, 0.02876542, 0.02870344, 0.02948559, 0.02957547,
       0.02953159, 0.02926907, 0.02920174, 0.02903258, 0.02940698,
       0.0294706 , 0.02943848, 0.02921116, 0.02933386, 0.02950477,
       0.02927976, 0.02873793, 0.02837618, 0.02904855, 0.02844703,
       0.0281879 , 0.02722174, 0.02708988, 0.02654416, 0.02625694,
       0.02575495, 0.02560009, 0.0259231 , 0.02664813, 0.02643215,
       0.0265674 , 0.02591866, 0.02629956, 0.02706765, 0.02624167,
       0.02635825, 0.02651024, 0.02590031, 0.02559852, 0.0255461 ,
       0.02558951, 0.02503284, 0.02525057, 0.02613403, 0.02627126,
       0.02655009, 0.0266166 , 0.02667778, 0.02640316, 0.02588103,
       0.02613389, 0.02594792, 0.02559205, 0.02567301, 0.02597713,
       0.02628347, 0.02641512, 0.02593455, 0.02578506, 0.02522661,
       0.02504022, 0.0253754 , 0.02552905, 0.02548452, 0.02560535,
       0.02558917, 0.02583314, 0.02624871, 0.02637231, 0.02665364,
       0.02687482, 0.02702937, 0.02715219, 0.02668809, 0.02658619,
       0.02712781, 0.02735948, 0.02747562, 0.02704298, 0.02734984,
       0.02708194, 0.02702051, 0.02658619, 0.02576545, 0.02548676,
       0.02488976, 0.02464303, 0.02518527, 0.02472924, 0.02490097,
       0.02467149, 0.02484531, 0.02481006, 0.02447821, 0.02519142,
       0.02546936, 0.02551823, 0.02483403, 0.02512573, 0.02532244,
       0.02487088, 0.02524676, 0.02546745, 0.02563641, 0.02528306,
       0.02526423, 0.02501789, 0.02538927, 0.02526069, 0.02565111,
       0.02570333, 0.02577934, 0.02600623, 0.02643623, 0.02657697,
       0.02712392, 0.02687842, 0.02706085, 0.02706394, 0.02683021,
       0.02698732, 0.02661622, 0.02745551, 0.02791479, 0.02845961,
       0.02832313, 0.02847606, 0.02878473, 0.02834258, 0.02847898,
       0.02829899, 0.02845157, 0.0287096 , 0.02800898, 0.02768777,
       0.02749256, 0.02788255, 0.02719828, 0.02698323, 0.02684333,
       0.02657187, 0.02622417, 0.02583717, 0.02587678, 0.02553969,
       0.02533507, 0.02508026, 0.02544323, 0.02551554, 0.0252224 ,
       0.02518777, 0.02520756, 0.02597738, 0.02610038, 0.02588513,
       0.02594105, 0.02646009, 0.02660689, 0.0267435 , 0.02698391,
       0.0268238 , 0.02744836, 0.02632745, 0.02633213, 0.02597587,
       0.02643934, 0.02678293, 0.02650151, 0.02631445, 0.0264693 ,
       0.02590611, 0.02639586, 0.02618413, 0.0263219 , 0.02576443,
       0.02615005, 0.0262819 , 0.02672575, 0.02684731, 0.02607488,
       0.02615397, 0.02652082, 0.02568106, 0.02526129, 0.02553352,
       0.02615224, 0.02613846, 0.02548014, 0.02534556, 0.02463615,
       0.0251296 , 0.02456909, 0.02448849, 0.0248039 , 0.02468169,
       0.02433207, 0.02359596, 0.02335562, 0.02248893, 0.02215142,
       0.0221817 , 0.02161897, 0.02079026, 0.02019727, 0.01972561,
       0.01929667, 0.01935447, 0.01945183, 0.01974064, 0.0197985 ,
       0.01923993, 0.01953169, 0.01949864, 0.01911249, 0.01834211,
       0.0181773 , 0.01782099, 0.01778865, 0.01692745, 0.01765912,
       0.01703077, 0.01778613, 0.01822395, 0.01796301, 0.01836137,
       0.01771658, 0.017901  , 0.01803303, 0.01822908, 0.01794316,
       0.01832114, 0.01788748, 0.01849347, 0.01833152, 0.01843178,
       0.01872522, 0.01883646, 0.01931146, 0.0193708 , 0.01909211,
       0.01949104, 0.01874683, 0.01866828, 0.01885576, 0.01906546,
       0.01898473, 0.01896844, 0.01875978, 0.01898724, 0.0190287 ,
       0.01899408, 0.01917069, 0.01918226, 0.01898592, 0.01952041,
       0.01888433, 0.01857255, 0.01882555, 0.01844152, 0.01787866,
       0.01782471, 0.01769756, 0.01718662, 0.01686042, 0.01702793,
       0.01664613, 0.0164044 , 0.01679312, 0.01720785, 0.01744051,
       0.017085  , 0.01717451, 0.01693453, 0.01753434, 0.01761515,
       0.01768911, 0.01818315, 0.0167058 , 0.01734581, 0.01706903,
       0.01689358, 0.01682795, 0.01633851, 0.01576896, 0.01605616,
       0.01561955, 0.01621785, 0.01637611, 0.01639243, 0.01637691,
       0.01647194, 0.01626257, 0.01663163, 0.01637026, 0.01619414,
       0.01563168, 0.01592979, 0.01603312, 0.01586192, 0.01598003,
       0.01564425, 0.01607421, 0.01630783, 0.01674326, 0.01695537,
       0.01730983, 0.01767341, 0.01822884, 0.01804342, 0.01832246,
       0.01845183, 0.01833511, 0.01833994, 0.018204  , 0.01802895,
       0.01807395, 0.01838708, 0.0184735 , 0.01845579, 0.01847287,
       0.0184699 , 0.01891399, 0.01882424, 0.01862828, 0.01847994,
       0.01812975, 0.01830118, 0.01831535, 0.01843154, 0.01808598,
       0.01787549, 0.01789625, 0.01740661, 0.01766038, 0.01714407,
       0.01707293, 0.01743895, 0.01747167, 0.01813879, 0.01795626,
       0.01781404, 0.01782542, 0.0179663 , 0.01776086, 0.01797379,
       0.01795449, 0.01756749, 0.01693044, 0.01661937, 0.01651911,
       0.01679308, 0.01676826, 0.01679867, 0.01737286, 0.0176364 ,
       0.01790763, 0.01794322, 0.01796755, 0.01770192, 0.01799738,
       0.0178097 , 0.01757268, 0.01700483, 0.01695887, 0.01672037,
       0.01709933, 0.01760585, 0.01703866, 0.01735994, 0.01653338]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.015225171497198754  last value of R 0.005823933446811009
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=0.04
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.87
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.63
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.30
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=1.01
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-1.94
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.29
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.72
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.37
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.73
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.37
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.84
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.33
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.15
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.00
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.50
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.47
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.95
Realization 16, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-3.07
min_std: 0.00019208346578716495
Realization 16, order_param_std_threshold to 0.00030, for {min_std, max_std} = {0.0002,0.0016} 
working on realization 16 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [0.454362892165324, 3.0397144101350513, 2.639647237887454, -2.1378442330722827, 0.4956588515123719, 1.1931503506948191, -1.097541043555763, 0.5160278758406553, -2.9881539535357216, 0.8955794854963104, -2.043884947093736, 0.4746274834597304, -1.4986879311327563, 0.44378411749575974, 0.13793588649830202, 2.3763448638501616, -0.5756866235337617, 1.4779899562031886, 2.843552288422818, -2.846670717209082], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e11221310>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8893., 8892., 8891., ..., 8893., 8893., 8893.],
       [8893., 8892., 8891., ..., 8893., 8893., 8893.],
       [8893., 8892., 8891., ..., 8893., 8893., 8893.]]), 'phi': array([[3.52602249e+00, 5.82027824e+00, 5.48141791e+00, ...,
        4.32658841e+00, 5.57787079e+00, 0.00000000e+00],
       [3.58218286e+00, 5.87127724e+00, 5.53165507e+00, ...,
        4.37316244e+00, 5.62566735e+00, 5.59704510e-02],
       [3.63065836e+00, 5.92548075e+00, 5.58488878e+00, ...,
        4.42938213e+00, 5.67194397e+00, 1.05019858e-01],
       ...,
       [2.80076310e+04, 2.80076012e+04, 2.80041926e+04, ...,
        2.80072127e+04, 2.80105924e+04, 2.80044041e+04],
       [2.80076769e+04, 2.80076541e+04, 2.80042470e+04, ...,
        2.80072670e+04, 2.80106446e+04, 2.80044534e+04],
       [2.80077247e+04, 2.80077010e+04, 2.80042961e+04, ...,
        2.80073172e+04, 2.80106915e+04, 2.80045076e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.13727858, 0.13783773, 0.13753243, ..., 0.00636805, 0.0060254 ,
       0.00582393]), 'R': array([0.0218968 , 0.02120265, 0.02104472, 0.02162673, 0.0214246 ,
       0.0219266 , 0.02196078, 0.02201815, 0.02182362, 0.02176869,
       0.02175938, 0.02090212, 0.02165577, 0.02145238, 0.02171544,
       0.02113413, 0.02109071, 0.02110518, 0.02097449, 0.02169948,
       0.02198577, 0.02178137, 0.02128449, 0.02183194, 0.02071051,
       0.0210475 , 0.02077472, 0.02096465, 0.02131926, 0.02190238,
       0.02193305, 0.02238327, 0.02245513, 0.02257249, 0.02230771,
       0.02230184, 0.02180214, 0.02171162, 0.0206585 , 0.01963329,
       0.01874893, 0.01874331, 0.01825515, 0.01939888, 0.01932741,
       0.01875255, 0.01964263, 0.01928082, 0.01964534, 0.01872367,
       0.01816887, 0.01796829, 0.01778748, 0.01736381, 0.01700996,
       0.01702381, 0.0168987 , 0.01776477, 0.01672843, 0.01724212,
       0.01742653, 0.01818561, 0.01888978, 0.01834151, 0.01940303,
       0.01959291, 0.01926497, 0.01873983, 0.01792276, 0.01756654,
       0.01774035, 0.01694922, 0.01762263, 0.01762476, 0.01673719,
       0.0173248 , 0.01727552, 0.01678673, 0.0163644 , 0.01653139,
       0.01653484, 0.01669943, 0.01723615, 0.01855475, 0.01790099,
       0.01759554, 0.01886457, 0.01858176, 0.0184766 , 0.018071  ,
       0.01842758, 0.01871213, 0.0190002 , 0.0194224 , 0.01897789,
       0.01952206, 0.01877583, 0.01866237, 0.0172978 , 0.01686107,
       0.01668466, 0.01751099, 0.01734774, 0.01714522, 0.01733237,
       0.01693893, 0.01667133, 0.01734163, 0.01701785, 0.01648626,
       0.01680121, 0.01717709, 0.01712326, 0.0171518 , 0.01701175,
       0.01698749, 0.01733621, 0.01835642, 0.01774271, 0.01730993,
       0.01827764, 0.01825974, 0.01817237, 0.01706334, 0.01748668,
       0.01706226, 0.01693895, 0.01678856, 0.01827064, 0.01823775,
       0.01800605, 0.01856809, 0.01752102, 0.01747306, 0.01774011,
       0.01812339, 0.01877583, 0.01838224, 0.01890755, 0.01842003,
       0.01803501, 0.0179805 , 0.01729051, 0.01744568, 0.01795458,
       0.01791113, 0.01788774, 0.01816463, 0.01911452, 0.01920493,
       0.01868803, 0.01844294, 0.01761853, 0.01591493, 0.01556928,
       0.01608811, 0.01611711, 0.01554433, 0.01517387, 0.01566439,
       0.01535108, 0.01536077, 0.01509842, 0.01544885, 0.01533142,
       0.01545704, 0.01608179, 0.01652267, 0.01611091, 0.01641128,
       0.01602695, 0.01520262, 0.01460161, 0.01458962, 0.01432973,
       0.01467014, 0.0146892 , 0.01467173, 0.01399909, 0.01422457,
       0.0136889 , 0.01410621, 0.01429469, 0.01336565, 0.01383148,
       0.01386642, 0.01394663, 0.01355711, 0.01371414, 0.01373975,
       0.01425733, 0.01369064, 0.01362717, 0.01406514, 0.01511018,
       0.01511319, 0.01498881, 0.01493323, 0.01486466, 0.01538251,
       0.01580904, 0.01609075, 0.0170258 , 0.01696723, 0.01684533,
       0.01743194, 0.017907  , 0.01742119, 0.01764129, 0.0186791 ,
       0.01821445, 0.01778357, 0.01844826, 0.01784243, 0.01815586,
       0.01741374, 0.01797025, 0.01816423, 0.01710353, 0.01652087,
       0.01641717, 0.01693937, 0.0170506 , 0.01682569, 0.01731005,
       0.01664612, 0.01636055, 0.01627252, 0.01661318, 0.0170225 ,
       0.01655157, 0.01595657, 0.0162324 , 0.01630455, 0.01591629,
       0.01577656, 0.01452029, 0.0140492 , 0.01241724, 0.01221503,
       0.01286201, 0.01201965, 0.01254441, 0.0126798 , 0.0124103 ,
       0.0125883 , 0.01300564, 0.01355245, 0.0134511 , 0.01317347,
       0.01361426, 0.01369296, 0.0131852 , 0.01362818, 0.01368514,
       0.01405388, 0.01454545, 0.0145747 , 0.01390262, 0.01340674,
       0.01441698, 0.01469598, 0.01438231, 0.0136876 , 0.01417228,
       0.01381789, 0.01408895, 0.01373752, 0.01404186, 0.01545688,
       0.01513632, 0.01391883, 0.01469818, 0.0153657 , 0.01603081,
       0.01612609, 0.01688138, 0.0170874 , 0.01735237, 0.0164341 ,
       0.01655152, 0.01566472, 0.01657361, 0.01669905, 0.01714598,
       0.01662035, 0.01652593, 0.01624071, 0.01591939, 0.01652593,
       0.01615604, 0.01561927, 0.01497153, 0.01404503, 0.01315912,
       0.01315147, 0.01271077, 0.01294708, 0.01271545, 0.01187387,
       0.01150774, 0.0113229 , 0.01214148, 0.01137142, 0.01130098,
       0.01072664, 0.00954003, 0.00967006, 0.00913348, 0.00854835,
       0.00847877, 0.00814605, 0.00867796, 0.0079273 , 0.00826473,
       0.00820016, 0.00826916, 0.00837643, 0.00801546, 0.00779991,
       0.00729267, 0.00674941, 0.00705875, 0.00773222, 0.00781648,
       0.00775151, 0.00780172, 0.00880313, 0.00828398, 0.00778358,
       0.00730497, 0.00774751, 0.00717748, 0.00624613, 0.00607087,
       0.00589515, 0.0062338 , 0.00628459, 0.00660957, 0.00757581,
       0.00817489, 0.0082234 , 0.00801701, 0.00765777, 0.00703477,
       0.00746   , 0.00714512, 0.00778006, 0.00724866, 0.0071734 ,
       0.00699334, 0.00687967, 0.00730904, 0.00729182, 0.00711413,
       0.00772428, 0.00827437, 0.00822052, 0.00793329, 0.00769862,
       0.00782606, 0.00802774, 0.00838533, 0.00852835, 0.00781065,
       0.0077744 , 0.00711678, 0.00678552, 0.00682196, 0.00619112,
       0.00681151, 0.00682556, 0.00636805, 0.0060254 , 0.00582393]), 'F1': 1.0} 


Plotting the network and its binarized asymptotic state.
len(final_phase_oscillator)= 20
Working on node 0
Working on node 1
Working on node 2
Working on node 3
Working on node 4
Working on node 5
Working on node 6
Working on node 7
Working on node 8
Working on node 9
Working on node 10
Working on node 11
Working on node 12
Working on node 13
Working on node 14
Working on node 15
Working on node 16
Working on node 17
Working on node 18
Working on node 19
mean of modulus of the order parameter, R, over 2T: 0.01609023533823839  last value of R 0.014336880339653033
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=0 is deltaPhi=0.00
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=1 is deltaPhi=-0.01
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=2 is deltaPhi=-2.90
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=3 is deltaPhi=0.42
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=4 is deltaPhi=-2.46
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=5 is deltaPhi=0.94
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=6 is deltaPhi=-2.07
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=7 is deltaPhi=1.28
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=8 is deltaPhi=-1.75
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=9 is deltaPhi=1.41
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=10 is deltaPhi=-1.68
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=11 is deltaPhi=1.45
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=12 is deltaPhi=-1.74
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=13 is deltaPhi=1.31
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=14 is deltaPhi=-2.04
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=15 is deltaPhi=1.03
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=16 is deltaPhi=-2.43
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=17 is deltaPhi=0.60
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=18 is deltaPhi=-2.81
Realization 17, mean phase difference {mod 2pi into [-pi, pi)} between k=0 and k=19 is deltaPhi=-2.84
min_std: 0.00016376839612447947
Realization 17, order_param_std_threshold to 0.00026, for {min_std, max_std} = {0.0002,0.0015} 
working on realization 17 results from sim: {'Nx': 20, 'Ny': 1, 'mx': 0, 'my': -999, 'topology': 'global', 'normalize_mutual_coupling_by_inputs': False, 'Tsim': 4500.0, 'computeFreqAndStab': False, 'phi_array_mult_tau': 1, 'phiInitConfig': [-1.4137645043109022, -2.2608205835200397, -0.7459519395373602, -1.8730210629516701, 0.09665830779837581, -0.8924994624012301, 2.4091914227145423, -2.2928019222042826, 0.07137080385446071, -2.1079786856585994, -2.249968892415041, -1.7473154660001968, 1.2997836281068835, -1.4831346342708929, 0.13496802444433786, -3.043777361750939, -2.216172410147558, 1.5203145083422829, 1.0722763303196485, 2.916050252198424], 'freq_beacons': 0.25, 'special_case': 'timeDepChangeOfCoupStr', 'typeOfTimeDependency': 'linear', 'min_max_rate_timeDepPara': [0, -0.0238732414637843, -2e-05], 'phiPerturb': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'phiPerturbRot': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0.]), 'max_delay_steps': 1275, 'phi_array_len': 1276} 
 {'intrF': 1.0, 'syncF': 1.0, 'coupK': -0.0238732414637843, 'gPDin': array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]), 'gPDin_symmetric': False, 'cutFc': 0.5, 'orderLF': 1, 'div': 1, 'friction_coefficient': 1, 'fric_coeff_PRE_vs_PRR': 'PRE', 'noiseVarVCO': 0.001, 'feedback_delay': 0.0, 'feedback_delay_var': None, 'transmission_delay': 10.2, 'transmission_delay_var': None, 'distribution_for_delays': None, 'coup_fct_sig': <function sine at 0x7f2e3dac4ef0>, 'derivative_coup_fct': <function cosine at 0x7f2e3dac4d40>, 'includeCompHF': False, 'vco_out_sig': <function square_wave_symm_zero at 0x7f2e3daca200>, 'typeVCOsig': 'analogHF', 'responseVCO': 'linear', 'antenna': False, 'posX': 0, 'posY': 0, 'posZ': 0, 'initAntennaState': 0, 'antenna_sig': <function sine at 0x7f2e3dac4ef0>, 'coup_fct_phase_shift': 0, 'extra_coup_sig': 'injection2ndHarm', 'shil_generation_through_filter': False, 'coupStr_2ndHarm': 0.3183098861837907, 'typeOfHist': 'freeRunning', 'sampleF': 125, 'sampleFplot': 5, 'treshold_maxT_to_plot': 50000.0, 'percentPeriodsAverage': 0.15, 'PSD_freq_resolution': 0.0002469135802469136, 'PSD_from_signal': <function square_wave at 0x7f2e3daca170>, 'signal_propagation_speed': 0.0, 'space_dimensions_xyz': [10, 10, 10], 'dt': 0.008, 'sim_time_steps': 562500, 'timeSeriesAverTime': 675, 'percent_of_Tsim': 0.9, 'G': <networkx.classes.graph.Graph object at 0x7f2e11242fd0>} 
 {'clock_counter': array([[   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       [   0.,    0.,    0., ...,    0.,    0.,    0.],
       ...,
       [8894., 8895., 8893., ..., 8893., 8894., 8894.],
       [8894., 8895., 8893., ..., 8893., 8894., 8894.],
       [8894., 8895., 8893., ..., 8893., 8894., 8894.]]), 'phi': array([[1.39026973e+00, 5.42858510e-01, 2.08331416e+00, ...,
        4.31712169e+00, 3.68505200e+00, 5.89210073e+00],
       [1.43713783e+00, 5.94531606e-01, 2.13407590e+00, ...,
        4.36757195e+00, 3.73521414e+00, 5.94236592e+00],
       [1.49364786e+00, 6.44367990e-01, 2.18535552e+00, ...,
        4.41575454e+00, 3.78223685e+00, 5.99360051e+00],
       ...,
       [2.80092362e+04, 2.80092146e+04, 2.80058695e+04, ...,
        2.80086356e+04, 2.80120748e+04, 2.80120964e+04],
       [2.80092838e+04, 2.80092644e+04, 2.80059199e+04, ...,
        2.80086852e+04, 2.80121229e+04, 2.80121475e+04],
       [2.80093327e+04, 2.80093143e+04, 2.80059685e+04, ...,
        2.80087411e+04, 2.80121765e+04, 2.80121931e+04]]), 'all_transmit_delay': [1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275], 'all_feedback_delay': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'timeDependentParameter': array([[ 0.        ,  0.        ,  0.        , ..., -0.02387328,
        -0.02387328, -0.02387328]]), 'tstep_annealing_start': 57525, 't': array([0.000000e+00, 8.000000e-03, 1.600000e-02, ..., 4.510176e+03,
       4.510184e+03, 4.510192e+03]), 'timeDepPara': array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328]), 'orderParam': array([0.29002156, 0.28974679, 0.29005054, ..., 0.01484015, 0.01447919,
       0.01433688]), 'R': array([0.01603763, 0.01528864, 0.01545103, 0.01510826, 0.01543029,
       0.01556259, 0.01538249, 0.01526244, 0.01455695, 0.01476648,
       0.0146518 , 0.01442224, 0.01437555, 0.01439541, 0.01426841,
       0.01414022, 0.01417967, 0.01443407, 0.01467168, 0.01478071,
       0.01504399, 0.01513077, 0.01469614, 0.01427763, 0.01400688,
       0.01398606, 0.01372262, 0.01367293, 0.01390879, 0.01352156,
       0.01362352, 0.01343129, 0.01376724, 0.0140795 , 0.01427399,
       0.01431929, 0.01503362, 0.01463455, 0.01474491, 0.01505072,
       0.01427735, 0.01480095, 0.01463093, 0.01451516, 0.01457099,
       0.01408277, 0.01341719, 0.0131757 , 0.01311499, 0.0130506 ,
       0.01267648, 0.01291518, 0.01229446, 0.01202577, 0.01284656,
       0.01264401, 0.01209311, 0.0116982 , 0.01203524, 0.01173871,
       0.01191414, 0.01151028, 0.01173088, 0.01176148, 0.012111  ,
       0.01255583, 0.01213165, 0.01112324, 0.01142593, 0.01089764,
       0.01030427, 0.01060628, 0.01103119, 0.01151698, 0.01182072,
       0.01143184, 0.01116819, 0.0109347 , 0.01135838, 0.01219411,
       0.01220258, 0.01107423, 0.01105988, 0.01100502, 0.01020379,
       0.01028148, 0.00981398, 0.00986435, 0.01040218, 0.01047501,
       0.01059064, 0.01111185, 0.01127139, 0.01130118, 0.01192239,
       0.01251422, 0.01260988, 0.01274628, 0.01279682, 0.01234969,
       0.01229307, 0.01264969, 0.01216708, 0.01249964, 0.01261385,
       0.01245354, 0.01190448, 0.01224101, 0.0119683 , 0.01210297,
       0.01238568, 0.01224834, 0.01221913, 0.01235567, 0.01295431,
       0.01290224, 0.01282303, 0.0129368 , 0.01289055, 0.01358264,
       0.01382529, 0.0134632 , 0.01369729, 0.0137471 , 0.01318327,
       0.0128678 , 0.01238043, 0.01280418, 0.01361444, 0.01315806,
       0.01313934, 0.01351082, 0.01404743, 0.01391706, 0.01358173,
       0.01340212, 0.01338331, 0.01362102, 0.01392783, 0.01386866,
       0.01345607, 0.01311158, 0.01290222, 0.01315523, 0.01254424,
       0.01260287, 0.01267316, 0.01264531, 0.01282483, 0.01280961,
       0.01296477, 0.01330533, 0.01392883, 0.01465644, 0.01501892,
       0.01536722, 0.01596891, 0.01621339, 0.01678854, 0.01698806,
       0.01734166, 0.01751024, 0.01707695, 0.01724518, 0.01719318,
       0.01748876, 0.01737655, 0.01745828, 0.01714749, 0.01696151,
       0.01599547, 0.01612238, 0.01619164, 0.0163286 , 0.01694495,
       0.01653017, 0.01627545, 0.01595509, 0.01603325, 0.01587746,
       0.01654029, 0.01662609, 0.01646742, 0.01643188, 0.01630155,
       0.01604071, 0.01585445, 0.01557515, 0.01551984, 0.01562086,
       0.01554412, 0.01571297, 0.0159238 , 0.0158899 , 0.01588974,
       0.0160679 , 0.01615331, 0.01642834, 0.0165474 , 0.01683056,
       0.01686769, 0.0163638 , 0.01655091, 0.01640701, 0.01662887,
       0.01668752, 0.01654186, 0.01728108, 0.01719781, 0.01719773,
       0.01703429, 0.01792593, 0.0179091 , 0.01830395, 0.01801081,
       0.01808099, 0.01807506, 0.01841625, 0.01837919, 0.01848165,
       0.01873847, 0.01863902, 0.01869851, 0.01910818, 0.01914112,
       0.01901011, 0.01898859, 0.0187262 , 0.01924571, 0.01885613,
       0.01884205, 0.01887172, 0.01871656, 0.0185324 , 0.01836945,
       0.01874411, 0.01881104, 0.01885612, 0.01919997, 0.01891893,
       0.01922872, 0.01892684, 0.01807187, 0.01779343, 0.01755656,
       0.01782207, 0.01875579, 0.01862924, 0.01828134, 0.01848228,
       0.01878876, 0.0185766 , 0.01900784, 0.01891391, 0.01936153,
       0.01911184, 0.0191832 , 0.01923905, 0.01973563, 0.01917266,
       0.0195805 , 0.02007119, 0.01973251, 0.0194639 , 0.01982697,
       0.02038453, 0.01980105, 0.01925793, 0.01912844, 0.01959652,
       0.01943743, 0.0197008 , 0.01968072, 0.01959844, 0.02000498,
       0.02027386, 0.02096917, 0.0214176 , 0.02133084, 0.02132904,
       0.0213444 , 0.02142174, 0.02199062, 0.02255034, 0.02246248,
       0.02193295, 0.02200445, 0.0223755 , 0.02257381, 0.02279715,
       0.0225226 , 0.02216858, 0.02187917, 0.02148083, 0.02120806,
       0.02152147, 0.02133129, 0.02172047, 0.0215429 , 0.02102864,
       0.02115135, 0.02056639, 0.02034128, 0.0208177 , 0.02131319,
       0.02103588, 0.02083095, 0.0203769 , 0.01982692, 0.02030273,
       0.01969834, 0.01990629, 0.01959073, 0.01938292, 0.01976676,
       0.0199619 , 0.01989486, 0.01925459, 0.01881795, 0.01886855,
       0.01812615, 0.01786289, 0.01713285, 0.01709233, 0.01665281,
       0.01682725, 0.01666748, 0.01679723, 0.01687012, 0.0171396 ,
       0.01655902, 0.01638402, 0.01650726, 0.01641939, 0.0166456 ,
       0.01731026, 0.01730104, 0.01801818, 0.01813069, 0.0182972 ,
       0.01820219, 0.01865103, 0.01825871, 0.01844645, 0.01789475,
       0.01836653, 0.01856309, 0.01870501, 0.01834803, 0.01792138,
       0.01779009, 0.01805774, 0.01788212, 0.01792158, 0.0179579 ,
       0.01804565, 0.01805678, 0.01807131, 0.01746296, 0.01707087,
       0.01673446, 0.01624796, 0.01567286, 0.01572338, 0.01568897,
       0.01552778, 0.01572737, 0.0160837 , 0.01570395, 0.01555162,
       0.01586476, 0.01499362, 0.01484015, 0.01447919, 0.01433688]), 'F1': 1.0}
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1477556080624864   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.011404355827089   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9540096137312954   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.015225171497198754  last value of R 0.005823933446811009
mean of modulus of the order parameter, R, over 2T: 0.015225171497198754  last value of R 0.005823933446811009

Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9752216605626268   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9161681095670848   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.1384935140270955   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.05712554147520681  last value of R 0.062478667979776255
mean of modulus of the order parameter, R, over 2T: 0.05712554147520681  last value of R 0.062478667979776255

Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.052592782501108   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.07142509684166   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0090301086416331   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.06237604130032575  last value of R 0.056909695338276375
mean of modulus of the order parameter, R, over 2T: 0.06237604130032575  last value of R 0.056909695338276375

Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0738305334473384   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9949773067414575   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9376422434846847   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.01609023533823839  last value of R 0.014336880339653033
mean of modulus of the order parameter, R, over 2T: 0.01609023533823839  last value of R 0.014336880339653033

Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0445509092519814   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9402045908514809   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.8998762887790497   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.02151304951339501  last value of R 0.015813974747736055
mean of modulus of the order parameter, R, over 2T: 0.02151304951339501  last value of R 0.015813974747736055

Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 1.0011399131884204   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9398200707327982   1.0   -0.0238732414637843
Set initial ctrl signal! self.instantF, self.intrF, self.K_Hz 0.9620779772662408   1.0   -0.0238732414637843
time-series time-dependent parameter:  [array([ 0.        ,  0.        ,  0.        , ..., -0.02387328,
       -0.02387328, -0.02387328])]
mean of modulus of the order parameter, R, over 2T: 0.02256947203202634  last value of R 0.01653338118447263
mean of modulus of the order parameter, R, over 2T: 0.02256947203202634  last value of R 0.01653338118447263
